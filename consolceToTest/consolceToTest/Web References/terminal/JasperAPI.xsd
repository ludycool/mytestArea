<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns="http://api.jasperwireless.com/ws/schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://api.jasperwireless.com/ws/schema" xsi:schemaLocation="http://www.w3.org/2001/XMLSchema http://www.w3.org/2001/XMLSchema.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:annotation>
    <xs:documentation>Jasper API Service XML Schema</xs:documentation>
    <xs:appinfo>
      <version xmlns="http://api.jasperwireless.com/ws/schema">5.90</version>
      <releaseDate xmlns="http://api.jasperwireless.com/ws/schema">2015-25-03</releaseDate>
    </xs:appinfo>
  </xs:annotation>
  <xs:complexType name="RequestType" abstract="true">
    <xs:annotation>
      <xs:documentation>
            The base type for all request payload types. The idea is to capture attributes common to all requests
            (such as version, license key, message id etc.).

            All concrete request types are derived from this abstract request type. This is the only place where
            polymorphism is encouraged.
        </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="messageId" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                    Message id used to uniquely identify (from the API client's perspective) this request.
                    Client code can use "correlationId" in the response (from the ResponseType) to identify which
                    request this response is regarding. Any string value can be provided if client does not care
                    about this feature.
                </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="version" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                    The API version (schema version) this request is based upon.
                </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="licenseKey" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                    The license key used for request metering, or possible authorization purpose (limit API client
                    itself, not the Control Center user).
                </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="ResponseType" abstract="true">
    <xs:annotation>
      <xs:documentation>
        The base type of all responses. It contains some generic information about the response, including
        timestamp, correlation id, version etc.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="correlationId" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Matches the "messageId" in the request.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="version" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                The version of the response payload schema.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="build" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Server build number.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="timestamp" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>
                The time when server processes the request, in UTC format.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="FaultType" abstract="true">
    <xs:annotation>
      <xs:documentation>
        The base type of all SOAP faults. It contains some generic information about the fault, which is
        nothing as of now.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence />
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:simpleType name="TerminalChangeType">
    <xs:annotation>
      <xs:documentation><![CDATA[
                The enum change type for terminal changes. Each int value indicate a change type.
                Each type allows a different set of target values pending business logic validation.
                Commas (,) and asterisks (*) are not allowed in literal string target values:

                1 - Device ID (also known as "Terminal ID"): literal string, max 50 characters
                2 - Modem ID: literal string, max 40 characters
                3 - SIM Status:
                    "TEST_READY_NAME": Test Ready,
                    "INVENTORY_NAME": Inventory,
                    "TRIAL_NAME": Trial,
                    "ACTIVATION_READY_NAME": Activation Ready,
                    "ACTIVATED_NAME": Activated,
                    "DEACTIVATED_NAME": Deactivated,
                    "RETIRED_NAME": Retired,
                    "PURGED_NAME": Purged
                4 - Rate Plan: literal string, name of an existing Rate Plan
                6 - Customer: literal string, name of an existing Customer
                7 - Overage Limit Override:
                    "DEFAULT": None
                    "TEMPORARY_OVERRIDE": Current cycle
                    "PERMANENT_OVERRIDE": Ongoing
                17 - Custom 1
                18 - Custom 2
                19 - Custom 3
                21 - Secure SIM Username copy rule:
                    "F" :  Unknown
                    "N" :  Not enabled
                    "O" :  Once
                    "A" "  Always
                    "L" :  Locked
                22 - Secure SIM Password copy rule:
                    "F" :  Unknown
                    "N" :  Not enabled
                    "O" :  Once
                    "A" "  Always
                    "L" :  Locked
                42 - Operator Custom 1
                43 - Operator Custom 2
                44 - Operator Custom 3
                45 - Operator Custom 4
                46 - Operator Custom 5
                47 - Customer Custom 1
                48 - Customer Custom 2
                49 - Customer Custom 3
                50 - Customer Custom 4
                51 - Customer Custom 5
                68 - Sale Date: date string in the format yyyy-MM-dd
                73 - Custom 4
                74 - Custom 5
                75 - Custom 6
                76 - Custom 7
                77 - Custom 8
                78 - Custom 9
                79 - Custom 10
             ]]></xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:int" />
  </xs:simpleType>
  <xs:complexType name="TerminalType">
    <xs:annotation>
      <xs:documentation>
        The detail information about a Terminal.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element minOccurs="0" name="terminalId" type="xs:string" />
      <xs:element minOccurs="0" name="modemId" type="xs:string" />
      <xs:element minOccurs="0" name="customer" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                The name of the customer this Terminal belongs to.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="endConsumerId" type="xs:string" />
      <xs:element name="suspended" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Suspended: "Y" for Yes, "N" for No, or "F" for Fraud Review
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ratePlan" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                The name of the rate plan.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="status" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                SIM Status:
                "TEST_READY_NAME": Test Ready,
                "INVENTORY_NAME": Inventory,
                "TRIAL_NAME": Trial,
                "ACTIVATION_READY_NAME": Activation Ready,
                "ACTIVATED_NAME": Activated,
                "DEACTIVATED_NAME": Deactivated,
                "RETIRED_NAME": Retired,
                "PURGED_NAME": Purged,
                "REPLACED_NAME": Replaced
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="monthToDateUsage" type="xs:decimal">
        <xs:annotation>
          <xs:documentation>
                Month to date usage in MB.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="overageLimitReached" type="xs:boolean" />
      <xs:element name="overageLimitOverride" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Overage Limit Override:
                "DEFAULT": None
                "TEMPORARY_OVERRIDE": Current cycle
                "PERMANENT_OVERRIDE": Ongoing
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="dateActivated" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>
                When the terminal is first activated.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="dateAdded" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>
                When the terminal is first added to the system.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="dateModified" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>
                When the terminal is last modified.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="dateShipped" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>
                When the terminal is shipped.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="monthToDateDataUsage" type="xs:decimal">
        <xs:annotation>
          <xs:documentation>
                Month to date data usage in MB.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="monthToDateSMSUsage" type="xs:decimal">
        <xs:annotation>
          <xs:documentation>
                Month to date SMS usage in message.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="monthToDateVoiceUsage" type="xs:decimal">
        <xs:annotation>
          <xs:documentation>
                Month to date voice usage in Secs
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="secureSimId" type="xs:string" />
      <xs:element name="custom1" type="xs:string" />
      <xs:element name="custom2" type="xs:string" />
      <xs:element name="custom3" type="xs:string" />
      <xs:element name="rating">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="termStartDate" type="xs:dateTime">
              <xs:annotation>
                <xs:documentation>
                            Term start date and time in UTC if this terminal is on Prepaid plan
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="termEndDate" type="xs:dateTime">
              <xs:annotation>
                <xs:documentation>
                            Term end date and time in UTC if this terminal is on Prepaid plan
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="renewalPolicy" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Renewal Policy:
                            "Deactivate": Deactivate,
                            "AutoRenew": Auto Renew,
                            "NamedPlan": Named plan
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="renewalRatePlan" type="xs:string" />
            <xs:element minOccurs="0" name="totalPrimaryIncludedData" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                            Amount of data included in MB on the current standard rate plan term, primary zone
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="primaryDataRemaining" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                            Amount of data remaining in MB in the current term, primary zone
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="totalPrimaryIncludedSMS" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                            Amount of SMS included on the current standard rate plan term, primary zone
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="primarySMSRemaining" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                            Amount of SMS remaining in the current term, primary zone
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="secureSimUsernameCopyRule" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                SecureSIM Username copy rule:
                "F" :  Unknown
                "N" :  Not enabled
                "O" :  Once
                "A" "  Always
                "L" :  Locked
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="secureSimPasswordCopyRule" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                SecureSIM Password copy rule:
                "F" :  Unknown
                "N" :  Not enabled
                "O" :  Once
                "A" "  Always
                "L" :  Locked
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="accountId" type="xs:long">
        <xs:annotation>
          <xs:documentation>
                Account ID
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="fixedIpAddress" nillable="true" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                The Fixed IP address of the SIM, in XX.XX.XX.XX format (for example, 12.34.56.78); null if the SIM does not have a Fixed IP address
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ctdSessionCount" nillable="true" type="xs:long">
        <xs:annotation>
          <xs:documentation>
                The cycle to date session count for the SIM; null if the session count is not available for the SIM
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="customerCustom1" type="xs:string" />
      <xs:element name="customerCustom2" type="xs:string" />
      <xs:element name="customerCustom3" type="xs:string" />
      <xs:element name="customerCustom4" type="xs:string" />
      <xs:element name="customerCustom5" type="xs:string" />
      <xs:element name="operatorCustom1" type="xs:string" />
      <xs:element name="operatorCustom2" type="xs:string" />
      <xs:element name="operatorCustom3" type="xs:string" />
      <xs:element name="operatorCustom4" type="xs:string" />
      <xs:element name="operatorCustom5" type="xs:string" />
      <xs:element name="imsi" type="xs:string" />
      <xs:element minOccurs="0" name="primaryICCID" type="xs:string" />
      <xs:element minOccurs="0" name="imei" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                This field may have the device IMEI or IMEISV depending on various factors such as your operator's installation as well as the device itself.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="globalSimType" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Global SIM Type:
                "GLOBAL_PRIMARY": Global Primary,
                "GLOBAL_VIRTUAL": Global Virtual
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="simNotes" type="xs:string" />
      <xs:element name="version" type="xs:int" />
      <xs:element name="custom4" type="xs:string" />
      <xs:element name="custom5" type="xs:string" />
      <xs:element name="custom6" type="xs:string" />
      <xs:element name="custom7" type="xs:string" />
      <xs:element name="custom8" type="xs:string" />
      <xs:element name="custom9" type="xs:string" />
      <xs:element name="custom10" type="xs:string" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:attribute name="msisdn" type="xs:string">
      <xs:annotation>
        <xs:documentation>
            The MSISDN of the SIM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="SmsMessageType">
    <xs:annotation>
      <xs:documentation>
        The detail information about SMS Message.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="smsMsgId" type="xs:long" />
      <xs:element name="status" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                If Message is Mobile Originated, status is Received.
                Message Status:
                "Cancelled": Cancelled,
                "CancelFailed": Cancel Failed,
                "CancelPending": Cancel Pending,
                "Delivered": Delivered,
                "Failed": Failed,
                "Pending": Pending,
                "Unknown": Unknown,
                "Received": Received
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="messageText" type="xs:string" />
      <xs:element minOccurs="0" name="senderLogin" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                For mobile originated message, senderLogin will be "Mobile Device"
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="sentToIccid" type="xs:string" />
      <xs:element minOccurs="0" name="sentFrom" type="xs:string" />
      <xs:element minOccurs="0" name="smsMsgAttemptStatus" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Message Attempt Status (Only applicable for Mobile Terminated Messages):
                "DeliverAckReceivedStatusSuccessful": Deliver AckReceivedStatus Successful,
                "SubmitFailed": Submit Failed,
                "FailedToGetConnection": Failed To Get Connection,
                "FailedToDeliver": Failed To Deliver,
                "SubmitAckReceivedStatusSuccessful": Submit AckReceivedStatus Successful,
                "SubmitAckReceivedStatusFailure": Submit AckReceivedStatus Failure,
                "CancelAckReceivedStatusSuccessful": Cancel AckReceivedStatus Successful,
                "CancelAckReceivedStatusFailure": Cancel AckReceived Status Failure,
                "MessageExpiredFailure": Message Expired Failure,
                "MessageDeleted": Message Deleted
                "Received": Received
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="msgType" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                "MO" : Mobile Originated (MO),
                "MT" : Mobile Terminated (MT)
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="dateSent" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>
                Date when the SMS message was sent
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="dateReceived" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>
                Date when the SMS message was received by the system.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="dateAdded" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>
                When the Message is first added to the system.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="dateModified" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>
                When the Message is last modified.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="SessionInfoType">
    <xs:annotation>
      <xs:documentation>
        The detail information about SIM session.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element name="ipAddress" type="xs:string" />
      <xs:element minOccurs="1" name="dateSessionStarted" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>
                Date when the session started
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="1" name="dateSessionEnded" nillable="true" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>
                Date when the session ended (if applicable)
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="QuotaInfoType">
    <xs:annotation>
      <xs:documentation>
        The detail information about SIM session.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="policyName" type="xs:string" />
      <xs:element name="quotaName" type="xs:string" />
      <xs:element name="balance" type="xs:string" />
      <xs:element minOccurs="1" name="expiryDate" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>
                Date when the service expires
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="RegistrationInZoneInfoType">
    <xs:annotation>
      <xs:documentation>
        The detail information about SIM registered in a given zone
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="accountName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="ratePlanName" type="xs:string" />
      <xs:element name="gtAddress" type="xs:string" />
      <xs:element name="zoneName" type="xs:string" />
      <xs:element minOccurs="1" name="eventDate" type="xs:dateTime" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="NetworkRegistrationInZoneInfoType">
    <xs:annotation>
      <xs:documentation>
        The detail information about SIM registered ss7 in a given zone
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="accountName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="ratePlanName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="gtAddress" type="xs:string" />
      <xs:element name="zoneName" type="xs:string" />
      <xs:element minOccurs="1" name="eventDate" type="xs:dateTime" />
      <xs:element minOccurs="0" maxOccurs="1" name="hostName" type="xs:string" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="SimFieldChangeType">
    <xs:annotation>
      <xs:documentation>
        The detail information about a change in a SIM field
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="1" name="oldValue" type="xs:string" />
      <xs:element minOccurs="1" name="newValue" type="xs:string" />
      <xs:element minOccurs="1" name="fieldName" type="xs:string" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="SimStateChangeInfoType">
    <xs:annotation>
      <xs:documentation>
        The detail information about SIM State Change
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="1" name="previousState" type="xs:string" />
      <xs:element minOccurs="1" name="currentState" type="xs:string" />
      <xs:element minOccurs="1" name="dateChanged" type="xs:dateTime" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="SimImeiChangeInfoType">
    <xs:annotation>
      <xs:documentation>
        The detail information about SIM Imei Change
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="1" name="previousImei" type="xs:string" />
      <xs:element minOccurs="1" name="currentImei" type="xs:string" />
      <xs:element minOccurs="1" name="dateChanged" type="xs:dateTime" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="SimImeiMismatchInfoType">
    <xs:annotation>
      <xs:documentation>
        The detail information about SIM Imei Mismatch
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="1" name="networkImei" type="xs:string" />
      <xs:element minOccurs="1" name="customerImei" type="xs:string" />
      <xs:element minOccurs="1" name="dateChanged" type="xs:dateTime" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="AccountTransferInfoType">
    <xs:annotation>
      <xs:documentation>
        Detailed information about Account Transfer
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="1" name="msisdn" type="xs:string" />
      <xs:element minOccurs="1" name="imei" type="xs:string" />
      <xs:element minOccurs="1" name="imsi" type="xs:string" />
      <xs:element minOccurs="1" name="previousSimState" type="xs:string" />
      <xs:element minOccurs="1" name="newSimState" type="xs:string" />
      <xs:element minOccurs="1" name="previousAccountId" type="xs:long" />
      <xs:element minOccurs="1" name="newAccountId" type="xs:long" />
      <xs:element minOccurs="1" name="previousAccountName" type="xs:string" />
      <xs:element minOccurs="1" name="newAccountName" type="xs:string" />
      <xs:element minOccurs="1" name="dateChanged" type="xs:dateTime" />
      <xs:element minOccurs="1" name="shippedDate" type="xs:dateTime" />
      <xs:element name="deferActionStartDate" type="xs:dateTime" />
      <xs:element name="deferActionPeriod" type="xs:int" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="MsisdnChangeInfoType">
    <xs:annotation>
      <xs:documentation>
        The detail information about msisdn change
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="1" name="iccid" type="xs:string" />
      <xs:element maxOccurs="1" name="imsi" type="xs:string" />
      <xs:element maxOccurs="1" name="imei" type="xs:string" />
      <xs:element maxOccurs="1" name="accountId" type="xs:long" />
      <xs:element maxOccurs="1" name="simState" type="xs:string" />
      <xs:element maxOccurs="1" name="customerName" type="xs:string" />
      <xs:element maxOccurs="1" name="endConsumerId" type="xs:string" />
      <xs:element maxOccurs="1" name="oldMsisdn" type="xs:string" />
      <xs:element maxOccurs="1" name="newMsisdn" type="xs:string" />
      <xs:element maxOccurs="1" name="accountName" type="xs:string" />
      <xs:element maxOccurs="1" name="dateChanged" type="xs:dateTime" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="SimRatePlanChangeInfoType">
    <xs:annotation>
      <xs:documentation>
        The detail information about SIM Rate Plan Change
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="1" name="oldRatePlanName" type="xs:string" />
      <xs:element minOccurs="1" name="newRatePlanName" type="xs:string" />
      <xs:element minOccurs="1" name="dateChanged" type="xs:dateTime" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="CdrInfoType">
    <xs:annotation>
      <xs:documentation>
        The detail information about CDR.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element name="causeRecordClosing" type="xs:string" />
      <xs:element name="apn" type="xs:string" />
      <xs:element name="bytesUplink" type="xs:long" />
      <xs:element name="bytesDownlink" type="xs:long" />
      <xs:element name="usage" type="xs:decimal" />
      <xs:element name="roundedUsage" type="xs:decimal" />
      <xs:element name="servedPdpAddr" type="xs:string" />
      <xs:element name="duration" type="xs:long" />
      <xs:element name="recordOpenTime" type="xs:dateTime" />
      <xs:element name="recordCloseTime" type="xs:dateTime" />
      <xs:element name="carrier" type="xs:string" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="CtdUsageInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about SIM CTD Usage.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element name="dataUsage" type="xs:string" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="CtdZUsageInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about SIM CTD Usage in a zone.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element name="dataUsage" type="xs:string" />
      <xs:element name="zoneName" type="xs:string" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="CtdVoiceUsageInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about SIM CTD Voice Usage
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element name="ctdVoiceMoUsage" type="xs:string" />
      <xs:element name="ctdVoiceMtUsage" type="xs:string" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="Past24HVoiceUsageInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about SIM Past 24 hours Voice Usage
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element name="dailyVoiceMoUsage" type="xs:string" />
      <xs:element name="dailyVoiceMtUsage" type="xs:string" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="Past24HDataUsageInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about SIM Past 24 hours Data Usage
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element name="dataUsage" type="xs:string" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="CtdVoiceZUsageInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about SIM CTD Voice Usage in a zone.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element name="ctdVoiceMoUsage" type="xs:string" />
      <xs:element name="ctdVoiceMtUsage" type="xs:string" />
      <xs:element name="zoneName" type="xs:string" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="CtdCsdUsageInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about SIM CTD Csd Usage
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element name="ctdCsdMoUsage" type="xs:string" />
      <xs:element name="ctdCsdMtUsage" type="xs:string" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="Past24HCsdUsageInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about SIM Past 24 hours Csd Usage
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element name="dailyCsdMoUsage" type="xs:string" />
      <xs:element name="dailyCsdMtUsage" type="xs:string" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="CtdCsdZUsageInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about SIM CTD Csd Usage in a zone.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element name="ctdCsdMoUsage" type="xs:string" />
      <xs:element name="ctdCsdMtUsage" type="xs:string" />
      <xs:element name="zoneName" type="xs:string" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="SmsMoReceivedInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about SMS MO received event. When the smppDataCoding is 4, message content is encoded with Base64.
        SMPP data coding:
        0 Default Alphabet
        1 IRA/IA5 (CCITT T.50)/ASCII (ANSI X3.4)
        3 Latin 1 (ISO-8859-1)
        4 Octet unspecified (8-bit binary)
        8 UCS2 (ISO/IEC-10646)
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" maxOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="accountName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="customerName" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="msisdn" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="messageContent" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="smppDataCoding" type="xs:int" />
      <xs:element minOccurs="1" maxOccurs="1" name="shortCode" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="receivedTime" type="xs:date" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="QuotaUsageInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about Quota Usage event.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" maxOccurs="1" name="imsi" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="accountName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="serviceName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="msisdn" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="messageType" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="quota" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="quotaUsage" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="quotaBalance" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="QuotaExpirationType">
    <xs:annotation>
      <xs:documentation>
        The information about Quota Expiration event.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" maxOccurs="1" name="imsi" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="accountName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="serviceName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="msisdn" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="messageType" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="quotaExpiration" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SmsUsageInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about SMS Usage.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" maxOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="accountName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="ratePlanName" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="alertType" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="totalDailySmsUsage" type="xs:decimal" />
      <xs:element minOccurs="1" maxOccurs="1" name="totalCtdSmsUsage" type="xs:decimal" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Past24HUssdUsageInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about Past 24 hours USSD Usage.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" maxOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="accountName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="ratePlanName" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="alertType" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="totalDailyUssdUsage" type="xs:decimal" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SimPlanCompleteInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about Sim's prepaid plan end.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" maxOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="accountName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="ratePlanName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="expirationDate" type="xs:date" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SimDataLimitInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about a SIM on a prepaid plan comes close to using its included usage.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" maxOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="accountName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="ratePlanName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="totalIncludedUsage" type="xs:decimal" />
      <xs:element minOccurs="0" maxOccurs="1" name="totalActualUsage" type="xs:decimal" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SimExpirationInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about a SIM on a prepaid plan comes close to its expiration date.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" maxOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="accountName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="ratePlanName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="expirationDate" type="xs:date" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TooManyDailyConnectionInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about a SIM has more connections than expected in trailing 24 hours.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="accountName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="ratePlanName" type="xs:string" />
      <xs:element minOccurs="1" name="currentSessionUsage" type="xs:long" />
      <xs:element minOccurs="1" name="sessionUsageThreshold" type="xs:long" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TooFewDailyConnectionInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about a SIM has fewer connections than expected in trailing 24 hours.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="accountName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="ratePlanName" type="xs:string" />
      <xs:element minOccurs="1" name="currentSessionUsage" type="xs:long" />
      <xs:element minOccurs="1" name="sessionUsageThreshold" type="xs:long" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DailySessionConnectionInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about a SIM has more/less connections than expected in trailing 24 hours.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="1" name="triggerType" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="accountName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="ratePlanName" type="xs:string" />
      <xs:element minOccurs="1" name="currentSessionUsage" type="xs:long" />
      <xs:element minOccurs="1" name="sessionUsageThreshold" type="xs:long" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TooManyCtdConnectionInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about a SIM has more connections than expected in the current billing cycle.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="accountName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="ratePlanName" type="xs:string" />
      <xs:element minOccurs="1" name="currentSessionUsage" type="xs:long" />
      <xs:element minOccurs="1" name="sessionUsageThreshold" type="xs:long" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="NoConnectionInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about a SIM has no connections within latest given hours.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="accountName" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="ratePlanName" type="xs:string" />
      <xs:element minOccurs="1" name="evaluatingTime" type="xs:dateTime" />
      <xs:element minOccurs="1" name="noConnectionThreshold" type="xs:long" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SecureSimAlertInfoType">
    <xs:annotation>
      <xs:documentation>
        The information about Secure SIM credential mismatch.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element name="dateAdded" type="xs:dateTime" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="AlertDetailType">
    <xs:annotation>
      <xs:documentation>
        The detail information about an Alert.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="alertId" type="xs:long" />
      <xs:element name="alertDate" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>
                Date when the alert was triggered
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="alertType" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                "A" : Data Overage Limit Proximity Alert,
                "B" : Data Included Usage Proximity Alert,
                "C" : SMS Included Usage Proximity Alert,
                "D" : Sim Activation Alert,
                "E" : Device Credentials Alert,
                "F" : Recent Data Usage Alert,
                "U" : Unknown
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="alertText" type="xs:string" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="nacIdType">
    <xs:annotation>
      <xs:documentation>
        The detail information about a Network Access Config ID.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="1" name="nacId" type="xs:long" />
      <xs:element minOccurs="0" maxOccurs="1" name="iccid" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="nacType">
    <xs:annotation>
      <xs:documentation>
        The detail information about a Network Access Config.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" maxOccurs="1" name="nacId" type="xs:long" />
      <xs:element minOccurs="0" maxOccurs="1" name="nacDescription" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="voiceEnabled" type="xs:boolean" />
      <xs:element minOccurs="1" maxOccurs="1" name="smsEnabled" type="xs:boolean" />
      <xs:element minOccurs="1" maxOccurs="1" name="gprsEnabled" type="xs:boolean" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MsisdnType">
    <xs:annotation>
      <xs:documentation>
        The mapping information ICCID and MSISDN.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="msisdn" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ImsiToIccidType">
    <xs:annotation>
      <xs:documentation>
        The mapping information ICCID,IMSI and MSISDN.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="imsi" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="msisdn" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DataUsageDetailType">
    <xs:sequence>
      <xs:element minOccurs="0" name="iccid" type="xs:string" />
      <xs:element minOccurs="0" name="cycleStartDate" type="xs:date" />
      <xs:element minOccurs="0" name="terminalId" type="xs:string" />
      <xs:element minOccurs="0" name="endConsumerId" type="xs:string" />
      <xs:element minOccurs="0" name="customer" type="xs:string" />
      <xs:element minOccurs="0" name="billable" type="xs:boolean" />
      <xs:element minOccurs="0" name="zone" type="xs:string" />
      <xs:element minOccurs="0" name="sessionStartTime" type="xs:dateTime" />
      <xs:element minOccurs="0" name="duration" type="xs:long">
        <xs:annotation>
          <xs:documentation>
                called duration in secs
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="dataVolume" type="xs:decimal">
        <xs:annotation>
          <xs:documentation>
                Data volume in KB.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="countryCode" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                ISO Standard Country Codes
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="serviceType" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Service Type (Standard or Event)
            </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SmsUsageDetailType">
    <xs:sequence>
      <xs:element minOccurs="0" name="iccid" type="xs:string" />
      <xs:element minOccurs="0" name="cycleStartDate" type="xs:date" />
      <xs:element minOccurs="0" name="terminalId" type="xs:string" />
      <xs:element minOccurs="0" name="endConsumerId" type="xs:string" />
      <xs:element minOccurs="0" name="customer" type="xs:string" />
      <xs:element minOccurs="0" name="billable" type="xs:boolean" />
      <xs:element minOccurs="0" name="zone" type="xs:string" />
      <xs:element minOccurs="0" name="dateSent" type="xs:dateTime" />
      <xs:element minOccurs="0" name="sentFrom" type="xs:string" />
      <xs:element minOccurs="0" name="sentTo" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="VoiceUsageDetailType">
    <xs:sequence>
      <xs:element minOccurs="0" name="iccid" type="xs:string" />
      <xs:element minOccurs="0" name="cycleStartDate" type="xs:date" />
      <xs:element minOccurs="0" name="terminalId" type="xs:string" />
      <xs:element minOccurs="0" name="endConsumerId" type="xs:string" />
      <xs:element minOccurs="0" name="customer" type="xs:string" />
      <xs:element minOccurs="0" name="billable" type="xs:boolean" />
      <xs:element minOccurs="0" name="zone" type="xs:string" />
      <xs:element minOccurs="0" name="callTime" type="xs:dateTime" />
      <xs:element minOccurs="0" name="calledNumber" type="xs:string" />
      <xs:element minOccurs="0" name="callDuration" type="xs:decimal">
        <xs:annotation>
          <xs:documentation>
                Call Duration in secs
            </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AccountCustomFieldsType">
    <xs:sequence>
      <xs:element minOccurs="0" name="fieldValue1" type="xs:string" />
      <xs:element minOccurs="0" name="fieldValue2" type="xs:string" />
      <xs:element minOccurs="0" name="fieldValue3" type="xs:string" />
      <xs:element minOccurs="0" name="fieldValue4" type="xs:string" />
      <xs:element minOccurs="0" name="fieldValue5" type="xs:string" />
      <xs:element minOccurs="0" name="fieldValue6" type="xs:string" />
      <xs:element minOccurs="0" name="fieldValue7" type="xs:string" />
      <xs:element minOccurs="0" name="fieldValue8" type="xs:string" />
      <xs:element minOccurs="0" name="fieldValue9" type="xs:string" />
      <xs:element minOccurs="0" name="fieldValue10" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AccountBillingType">
    <xs:sequence>
      <xs:element minOccurs="0" name="address" type="AddressType" />
      <xs:element minOccurs="0" name="contact" type="ContactType" />
      <xs:element minOccurs="0" name="taxId" type="xs:string" />
      <xs:element minOccurs="0" name="currencyCode" type="xs:string" />
      <xs:element minOccurs="0" name="newBillingCycleStart" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                A valid billing schedule name to change to.
                If you want to delete a billing schedule that was
                previously specified for this account and this
                billing schedule has still to take effect, then
                use the value "None" here. By specifying "None"
                you will be able to delete that billing schedule and
                the account will continue to stay on the existing billing schedule.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="LocationServiceType" final="restriction">
    <xs:restriction base="xs:string">
      <xs:enumeration value="AYCE" />
      <xs:enumeration value="PAYG" />
      <xs:enumeration value="NONE" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="AccountSupportType">
    <xs:sequence>
      <xs:element minOccurs="0" name="showAccountSupport" type="xs:boolean" />
      <xs:element minOccurs="0" name="showJasperSupport" type="xs:boolean" />
      <xs:element minOccurs="0" name="showSpSupport" type="xs:boolean" />
      <xs:element minOccurs="0" name="email" type="xs:string" />
      <xs:element minOccurs="0" name="phone" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AccountType">
    <xs:sequence>
      <xs:element minOccurs="1" name="accountId" type="xs:long" />
      <xs:element minOccurs="0" name="accountName" type="xs:string" />
      <xs:element minOccurs="0" name="billable" type="xs:boolean" />
      <xs:element minOccurs="0" name="status" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                "A": Active,
                "I": Inactive,
                "D": Deleted
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="operatorAccountId" type="xs:string" />
      <xs:element minOccurs="0" name="primaryContact" type="ContactType" />
      <xs:element minOccurs="0" name="shippingAddress" type="AddressType" />
      <xs:element minOccurs="0" name="billing" type="AccountBillingType" />
      <xs:element minOccurs="0" name="support" type="AccountSupportType" />
      <xs:element minOccurs="0" name="customFields" type="AccountCustomFieldsType" />
      <xs:element minOccurs="0" name="locationServiceType" type="LocationServiceType" />
      <xs:element minOccurs="0" name="locationServiceMim" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OfferRatePlanType">
    <xs:sequence>
      <xs:element name="ratePlanId" type="xs:long" />
      <xs:element minOccurs="0" name="offerRatePlanDesc" type="xs:string">
        <xs:annotation>
          <xs:documentation>The offer-specific description of this rate plan</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="price" type="xs:decimal" />
      <xs:element minOccurs="0" name="dataLimitMB" type="xs:decimal">
        <xs:annotation>
          <xs:documentation>The amount of data included in the plan, in megabytes; omitted if there is no data limit</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="termLength" type="xs:long">
        <xs:annotation>
          <xs:documentation>The duration of the plan, in the units specified by termUnit; omitted if the plan is a monthly recurring plan</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="termUnit" type="xs:string">
        <xs:annotation>
          <xs:documentation>The units for termLength:
                "MI": minutes
                "D": days
                "MO": months</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="combineSms" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Whether the SMS MO and SMS MT limits are combined; if true, the combined limit (SMS MO + SMS MT) will be returned in smsMoLimitMessages</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="smsMoLimitMessages" type="xs:long">
        <xs:annotation>
          <xs:documentation>The amount of SMS MO included in the plan, in messages; omitted if there is no SMS MO limit; if combineSMS=true, this is the total SMS (SMS MO + SMS MT) limit</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="smsMtLimitMessages" type="xs:long">
        <xs:annotation>
          <xs:documentation>The amount of SMS MT included in the plan, in messages; omitted if combineSMS=true or if there is no SMS MT limit</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="voiceLimitSeconds" type="xs:long">
        <xs:annotation>
          <xs:documentation>The amount of voice included in the plan, in seconds (ex. if the plan includes 10 minutes 30 seconds, we will return 630); omitted if there is no voice limit</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="message" type="xs:string">
        <xs:annotation>
          <xs:documentation>The offer-specific message for this rate plan</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="notes" type="xs:string">
        <xs:annotation>
          <xs:documentation>The offer-specific notes for this rate plan</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="dateModified" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>The date/time when the plan selection on this offer was last changed</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="UserIdentifierType">
    <xs:annotation>
      <xs:documentation>
        Information about a user account, such as user name.
        This can be used to identify a user.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="namespace" type="xs:string" />
      <xs:element minOccurs="0" name="account" type="xs:string" />
      <xs:element name="username" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="UserCredentialsType">
    <xs:annotation>
      <xs:documentation>
        Credentials that may be used in lieu of username
        and password combination for user authentication.
        This is usually used for single sign-on.
    </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string" />
  </xs:simpleType>
  <xs:complexType name="AddressType">
    <xs:sequence>
      <xs:element minOccurs="0" name="address1" type="xs:string" />
      <xs:element minOccurs="0" name="address2" type="xs:string" />
      <xs:element minOccurs="0" name="city" type="xs:string" />
      <xs:element minOccurs="0" name="region" type="xs:string" />
      <xs:element minOccurs="0" name="countryCode" type="xs:string" />
      <xs:element minOccurs="0" name="postalCode" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ContactType">
    <xs:sequence>
      <xs:annotation>
        <xs:documentation>
            firstName, middleName, LastName are used for the CreateAccount API
            Name is used for the GetAccountDetails and EditAccount APIs
        </xs:documentation>
      </xs:annotation>
      <xs:element minOccurs="0" name="firstName" type="xs:string" />
      <xs:element minOccurs="0" name="middleName" type="xs:string" />
      <xs:element minOccurs="0" name="lastName" type="xs:string" />
      <xs:element minOccurs="0" name="phone" type="xs:string" />
      <xs:element minOccurs="0" name="email" type="xs:string" />
      <xs:element minOccurs="0" name="fax" type="xs:string" />
      <xs:element minOccurs="0" name="jobTitle" type="xs:string" />
      <xs:element minOccurs="0" name="name" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SalesLeadType">
    <xs:sequence>
      <xs:element name="company" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Name of the company for this sales lead.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="industry" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Industry within which the company operates.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="launchTimeframe" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Time frame within which the company plans to launch usage of Jasper Wireless' services or products.
                This is a free-form field. E.g. "0-3 months", "90 days", etc.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="device" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Name of the device that the company plans to use for this launch.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="numberOfDevices" type="xs:int">
        <xs:annotation>
          <xs:documentation>
                Number of devices expected to be launched in the supplied time frame.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="referralCode" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Referral code of the sales person associated with this sales lead.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="deviceDetails" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Details about the device that is expected to be launched.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ResponseStatusType">
    <xs:sequence>
      <xs:element name="responseStatus" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                The overall status of the response.
                Examples of statuses are "SUCCESS" and "FAILURE".
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="unbounded" name="message" type="ResponseMessageType">
        <xs:annotation>
          <xs:documentation>
                Messages to be passed in the response back to the caller.
                Messages would/should be spelled out individually if needed,
                at appropriate granularity, instead of one giant message.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ResponseMessageType">
    <xs:sequence>
      <xs:element name="type" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Type of the message. E.g. "Bad parameter".
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="subject" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Subject of the message, i.e. the entity that this message is about. E.g. "Name".
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="payload" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                The content of the message, e.g. "Jane Doe".
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="description" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Detailed description for the message. E.g. "Try a different user name.".
            </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MonthlyDataUsageInfoType">
    <xs:annotation>
      <xs:documentation>
        The information is about monthly billable data usage for pooled rate plans
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" maxOccurs="1" name="accountName" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="zoneName" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="ratePlanName" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="totalIncludedZoneUsage" type="xs:decimal" />
      <xs:element minOccurs="1" maxOccurs="1" name="totalActualZoneUsage" type="xs:decimal" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MonthlySmsUsageInfoType">
    <xs:annotation>
      <xs:documentation>
        The information is about monthly billable SMS usage for pooled rate plans
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" maxOccurs="1" name="accountName" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="zoneName" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="smsUsageType" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="ratePlanName" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="totalIncludedZoneUsage" type="xs:decimal" />
      <xs:element minOccurs="1" maxOccurs="1" name="totalActualZoneUsage" type="xs:decimal" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MonthlyUssdUsageInfoType">
    <xs:annotation>
      <xs:documentation>
        The information is about monthly billable USSD usage for pooled rate plans
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" maxOccurs="1" name="accountName" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="zoneName" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="ussdUsageType" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="ratePlanName" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="totalIncludedZoneUsage" type="xs:decimal" />
      <xs:element minOccurs="1" maxOccurs="1" name="totalActualZoneUsage" type="xs:decimal" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SimTransferToAccountStatusType">
    <xs:annotation>
      <xs:documentation>
        The detailed information about status of a sim transfer to an account.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element name="transferstatus" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>
                Transfer Status:
                "SUCCESS": True,
                "FAILURE": False
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="errormessage" type="xs:string" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="SimTransferResponseType">
    <xs:annotation>
      <xs:documentation>
        The detailed information about request execution status.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element name="status" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>
                Request Status:
                "SUCCESS": True,
                "FAILURE": False
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="errorCode" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                High-level Error Code. That defines the Validation errors, Business rule validation errors or processing Errors. E.g.: 1800109
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="errorDetails" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Details of the each error message possible input values. E.g. Account mapping not defined for Global SIM transfer
            </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="GlobalSimTransferStatusType">
    <xs:annotation>
      <xs:documentation>
        Global Sim Transfer Status:
        "PENDING": Global Sim transfer is scheduled but yet pending.
        "COMPLETE: Global Sim transfer is complete.
        "FAILED": Global Sim transfer has failed.
        "CANCELLED": Global Sim transfer has been cancelled.
    </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="PENDING" />
      <xs:enumeration value="COMPLETE" />
      <xs:enumeration value="FAILED" />
      <xs:enumeration value="CANCELLED" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="GlobalSimTransferType">
    <xs:annotation>
      <xs:documentation>
        Global Sim Transfer Type:
        "STANDARD": Transfer from one Operator to another.
        "REVERT": Rerverting earlier transfer.
    </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="STANDARD" />
      <xs:enumeration value="REVERT" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="GlobalSimOtaAlgoType">
    <xs:annotation>
      <xs:documentation>
        GlobalSimOtaAlgoType:
        We currently support the following two types of OTA algorithms:
            - GND
            - GSMA
             - INTERSPTRANSFER
            - JASPER(Outdated)
    </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="GND" />
      <xs:enumeration value="GSMA" />
      <xs:enumeration value="INTERSPTRANSFER" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="GlobalSimSubscriptionInfoType">
    <xs:annotation>
      <xs:documentation>
        Target Global SIM subscription information which contains Target ICCID, Target MSISDN and target IMSI which SIM will have the transfer activity is complete.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="targetIccid">
        <xs:annotation>
          <xs:documentation>
                Target ICCID for the SIM
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="targetMsisdn">
        <xs:annotation>
          <xs:documentation>
                Target MSISDN for the SIM
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="targetImsi">
        <xs:annotation>
          <xs:documentation>
                Target IMSI for the SIM
            </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="GlobalSimSourceSubscriptionInfoType">
    <xs:annotation>
      <xs:documentation>
        Global SIM subscription information which contains ICCID, MSISDN and IMSI which the SIM has / will have.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="sourceIccid">
        <xs:annotation>
          <xs:documentation>
                Target ICCID for the SIM
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="sourceMsisdn">
        <xs:annotation>
          <xs:documentation>
                Target MSISDN for the SIM
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="sourceImsi">
        <xs:annotation>
          <xs:documentation>
                Target IMSI for the SIM
            </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LocationTrackingInfoType">
    <xs:annotation>
      <xs:documentation>
        The detail information about the location info of the tracked terminal
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:annotation>
        <xs:documentation>
            The push notification should contain msisdn and/or imsi as Terminal ID. This is validated in Java codes.
        </xs:documentation>
      </xs:annotation>
      <xs:element minOccurs="0" name="msisdn" type="xs:string" />
      <xs:element minOccurs="0" name="imsi" type="xs:string" />
      <xs:element name="locationEvent">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="Location Update" />
            <xs:enumeration value="Cancel Location" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="networkId" type="xs:string" />
      <xs:element name="gtAddress" type="xs:string" />
      <xs:element name="MSC">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="Yes" />
            <xs:enumeration value="No" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="SGSN">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="Yes" />
            <xs:enumeration value="No" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="operatorMccMnc" type="xs:string" />
      <xs:element name="eventDateTime" type="xs:dateTime" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="GlobalSimTransferResponseType">
    <xs:annotation>
      <xs:documentation>
        The detail information about Global SIM transfer
    </xs:documentation>
    </xs:annotation>
    <xs:complexContent mixed="false">
      <xs:extension base="ResponseType">
        <xs:sequence>
          <xs:element name="primaryIccid" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                        Primary ICCID of the Global SIM
                    </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="status" type="GlobalSimTransferStatusType">
            <xs:annotation>
              <xs:documentation>
                        Status of the Global Sim Transfer
                    </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="errorCode" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                        High-level Error Code. That defines the Validation errors, Business rule validation errors or processing Errors. E.g.: 1800109
                    </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="errorDetails" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                        Details of the each error message possible input values. E.g. Account mapping not defined for Global SIM transfer
                    </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="targetSimSubscriptionInfo" type="GlobalSimSubscriptionInfoType">
            <xs:annotation>
              <xs:documentation>
                        Target SIM subscription information
                    </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OrderResponseType">
    <xs:annotation>
      <xs:documentation>
        The detail information about the SIM Order
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:annotation>
        <xs:documentation>
            The push notification should contain orderId, orderStatus,acctID, price and quantity.
        </xs:documentation>
      </xs:annotation>
      <xs:element minOccurs="0" name="contactName" type="xs:string" />
      <xs:element minOccurs="0" name="contactPhone" type="xs:string" />
      <xs:element minOccurs="0" name="contactFax" type="xs:string" />
      <xs:element minOccurs="0" name="email" type="xs:string" />
      <xs:element minOccurs="0" name="orderId" type="xs:long" />
      <xs:element minOccurs="0" name="orderStatus" type="xs:string" />
      <xs:element minOccurs="0" name="orderDate" type="xs:dateTime" />
      <xs:element minOccurs="0" name="acctName" type="xs:string" />
      <xs:element minOccurs="0" name="po" type="xs:string" />
      <xs:element minOccurs="0" name="implementationDate" type="xs:dateTime" />
      <xs:element minOccurs="0" name="expedited" type="xs:string" />
      <xs:element minOccurs="0" name="acctId" type="xs:long" />
      <xs:element minOccurs="0" name="price" type="xs:decimal" />
      <xs:element minOccurs="0" name="quantity" type="xs:int" />
      <xs:element minOccurs="0" name="orderTotal" type="xs:string" />
      <xs:element minOccurs="0" name="desc" type="xs:string" />
      <xs:element minOccurs="0" name="opn" type="xs:string" />
      <xs:element minOccurs="0" name="operatorAcctId" type="xs:string" />
      <xs:element minOccurs="0" name="ratePlan" type="xs:string" />
      <xs:element minOccurs="0" name="communicationPlan" type="xs:string" />
      <xs:element minOccurs="0" name="shipStatus" type="xs:string" />
      <xs:element minOccurs="0" name="shipAddr1" type="xs:string" />
      <xs:element minOccurs="0" name="shipAddr2" type="xs:string" />
      <xs:element minOccurs="0" name="city" type="xs:string" />
      <xs:element minOccurs="0" name="stateRegion" type="xs:string" />
      <xs:element minOccurs="0" name="country" type="xs:string" />
      <xs:element minOccurs="0" name="postalCode" type="xs:string" />
      <xs:element minOccurs="0" name="methodAndShippingCompany" type="xs:string" />
      <xs:element minOccurs="0" name="custAcctNo" type="xs:string" />
      <xs:element minOccurs="0" name="notes" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CIPOrderResponseType">
    <xs:annotation>
      <xs:documentation>
        The detail information about the CIP SIM Order
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:annotation>
        <xs:documentation>
            The push notification should contain orderId, orderStatus,acctID, and orderLineItems.
        </xs:documentation>
      </xs:annotation>
      <xs:element minOccurs="0" name="orderId" type="xs:long" />
      <xs:element minOccurs="0" name="acctId" type="xs:long" />
      <xs:element minOccurs="0" name="extAcctPrefix" type="xs:string" />
      <xs:element minOccurs="0" name="customerName" type="xs:string" />
      <xs:element minOccurs="0" name="contactName" type="xs:string" />
      <xs:element minOccurs="0" name="contactPhone" type="xs:string" />
      <xs:element minOccurs="0" name="email" type="xs:string" />
      <xs:element minOccurs="0" name="orderStatus" type="xs:string" />
      <xs:element minOccurs="0" name="orderDate" type="xs:dateTime" />
      <xs:element minOccurs="0" name="estDeliveryDate" type="xs:dateTime" />
      <xs:element minOccurs="0" name="orderLineItems">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="orderLineItem">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" name="orderLineId" type="xs:long" />
                  <xs:element minOccurs="0" name="orderLineItemId" type="xs:long" />
                  <xs:element minOccurs="0" name="masterOpnId" type="xs:long" />
                  <xs:element minOccurs="0" name="opnId" type="xs:long" />
                  <xs:element minOccurs="0" name="opnDisplayName" type="xs:string" />
                  <xs:element minOccurs="0" name="opn" type="xs:string" />
                  <xs:element minOccurs="0" name="quantity" type="xs:long" />
                  <xs:element minOccurs="0" name="price" type="xs:decimal" />
                  <xs:element minOccurs="0" name="amount" type="xs:decimal" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="orderTotal" type="xs:decimal" />
      <xs:element minOccurs="0" name="shipStatus" type="xs:string" />
      <xs:element minOccurs="0" name="companyName" type="xs:string" />
      <xs:element minOccurs="0" name="attentionTo" type="xs:string" />
      <xs:element minOccurs="0" name="shipAddr1" type="xs:string" />
      <xs:element minOccurs="0" name="shipAddr2" type="xs:string" />
      <xs:element minOccurs="0" name="city" type="xs:string" />
      <xs:element minOccurs="0" name="stateRegion" type="xs:string" />
      <xs:element minOccurs="0" name="country" type="xs:string" />
      <xs:element minOccurs="0" name="postalCode" type="xs:string" />
      <xs:element minOccurs="0" name="zipFour" type="xs:string" />
      <xs:element minOccurs="0" name="notes" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OTAMsisdnResponseType">
    <xs:annotation>
      <xs:documentation>
        The detail information about the OTA Msisdn callback notification
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:annotation>
        <xs:documentation>
            The push notification should contain otaMessageType, status, simId, sentTo and dateSent.
        </xs:documentation>
      </xs:annotation>
      <xs:element name="otaCallbackNotificationId" type="xs:long" />
      <xs:element name="otaMessageType" type="xs:string" />
      <xs:element name="status" type="xs:string" />
      <xs:element name="simId" type="xs:long" />
      <xs:element name="sentTo" type="xs:string" />
      <xs:element minOccurs="0" name="dateSent" type="xs:dateTime" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OTANADResetResponseType">
    <xs:annotation>
      <xs:documentation>
        The detail information about the OTA NAD Reset callback notification
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:annotation>
        <xs:documentation>
            The push notification should contain otaMessageType, status, simId, sentTo and dateSent.
        </xs:documentation>
      </xs:annotation>
      <xs:element name="otaCallbackNotificationId" type="xs:long" />
      <xs:element name="otaMessageType" type="xs:string" />
      <xs:element name="status" type="xs:string" />
      <xs:element name="simId" type="xs:long" />
      <xs:element name="sentTo" type="xs:string" />
      <xs:element minOccurs="0" name="dateSent" type="xs:dateTime" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OTAPlmnRefreshResponseType">
    <xs:annotation>
      <xs:documentation>
        The detail information about the OTA Plmn Refresh callback notification
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:annotation>
        <xs:documentation>
            The push notification should contain otaMessageType, status, simId, sentTo and dateSent.
        </xs:documentation>
      </xs:annotation>
      <xs:element name="otaCallbackNotificationId" type="xs:long" />
      <xs:element name="otaMessageType" type="xs:string" />
      <xs:element name="status" type="xs:string" />
      <xs:element name="simId" type="xs:long" />
      <xs:element name="sentTo" type="xs:string" />
      <xs:element minOccurs="0" name="dateSent" type="xs:dateTime" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MsisdnCallbackResponseType">
    <xs:annotation>
      <xs:documentation>
        The detail information about the Msisdn callback notification
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:annotation>
        <xs:documentation>
            The push notification should contain msisdnCallbackNotificationId, iccid, msisdn, status and dateSent.
        </xs:documentation>
      </xs:annotation>
      <xs:element name="msisdnCallbackNotificationId" type="xs:long" />
      <xs:element name="iccid" type="xs:string" />
      <xs:element name="msisdn" type="xs:string" />
      <xs:element name="status" type="xs:string" />
      <xs:element name="correlationId" type="xs:string" />
      <xs:element minOccurs="0" name="dateSent" type="xs:dateTime" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ExtendedTerminalType">
    <xs:annotation>
      <xs:documentation>
        The detailed RawSim information.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="rawSimId" type="xs:long" />
      <xs:element minOccurs="0" name="simFileId" type="xs:long" />
      <xs:element name="imsi" type="xs:string" />
      <xs:element name="iccid" type="xs:string" />
      <xs:element minOccurs="0" name="pin1" type="xs:string" />
      <xs:element minOccurs="0" name="puk1" type="xs:string" />
      <xs:element minOccurs="0" name="pin2" type="xs:string" />
      <xs:element minOccurs="0" name="puk2" type="xs:string" />
      <xs:element minOccurs="0" name="kiEnc" type="xs:string" />
      <xs:element minOccurs="0" name="adm3" type="xs:string" />
      <xs:element minOccurs="0" name="adm4" type="xs:string" />
      <xs:element minOccurs="0" name="acc" type="xs:string" />
      <xs:element minOccurs="0" name="dlKey" type="xs:string" />
      <xs:element name="accountId" type="xs:long">
        <xs:annotation>
          <xs:documentation>
                Account ID
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="dateAdded" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>
                When the raw sim was first added to the system.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="dateModified" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>
                When the raw sim was last modified.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="dualImsiCapable" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>
                DualImsiCapable: "Y" for Yes, "N" for No
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="dualImsiEnabled" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>
                DualImsiEnabled: "Y" for Yes, "N" for No
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="simBound" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>
                SimBound: "Y" for Yes, "N" for No
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="adm1" type="xs:string" />
      <xs:element minOccurs="0" name="adm2" type="xs:string" />
      <xs:element minOccurs="0" name="areaCode" type="xs:string" />
      <xs:element minOccurs="0" name="countryCode" type="xs:string" />
      <xs:element name="externalSimProfileId" type="xs:string" />
      <xs:element name="operatorId" type="xs:long">
        <xs:annotation>
          <xs:documentation>
                Operator ID
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
    <xs:attribute name="msisdn" type="xs:long">
      <xs:annotation>
        <xs:documentation>
            The MSISDN of the SIM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="SimLocationAlertType">
    <xs:annotation>
      <xs:documentation>
        The detail information about SIM Location Alert
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" name="iccid" type="xs:string" />
      <xs:element minOccurs="1" name="alertType" type="xs:string" />
      <xs:element minOccurs="0" name="accountId" type="xs:long" />
      <xs:element minOccurs="0" name="accountName" type="xs:string" />
      <xs:element minOccurs="0" name="msisdn" type="xs:string" />
    </xs:sequence>
    <xs:anyAttribute processContents="lax" />
  </xs:complexType>
  <xs:complexType name="ImsiInfo">
    <xs:all>
      <xs:element name="imsi" type="xs:string" />
      <xs:element minOccurs="0" name="iccid" type="xs:string" />
      <xs:element minOccurs="0" name="isOnHLR" type="xs:boolean" />
      <xs:element minOccurs="0" name="kienc" type="xs:string" />
      <xs:element minOccurs="0" name="transportKey" type="xs:string" />
      <xs:element minOccurs="0" name="msisdn" type="xs:string" />
      <xs:element minOccurs="0" name="subsType" type="xs:string" />
      <xs:element minOccurs="0" name="onSRP" type="xs:boolean" />
      <xs:element minOccurs="0" name="hlrAccessMode" type="xs:string" />
    </xs:all>
  </xs:complexType>
  <xs:complexType name="SimAuxFieldInfo">
    <xs:all>
      <xs:element minOccurs="0" name="OPERATORCUSTOM1" type="xs:string" />
      <xs:element minOccurs="0" name="OPERATORCUSTOM2" type="xs:string" />
      <xs:element minOccurs="0" name="OPERATORCUSTOM3" type="xs:string" />
      <xs:element minOccurs="0" name="OPERATORCUSTOM4" type="xs:string" />
      <xs:element minOccurs="0" name="OPERATORCUSTOM5" type="xs:string" />
      <xs:element minOccurs="0" name="customerCustom1" type="xs:string" />
      <xs:element minOccurs="0" name="customerCustom2" type="xs:string" />
      <xs:element minOccurs="0" name="customerCustom3" type="xs:string" />
      <xs:element minOccurs="0" name="customerCustom4" type="xs:string" />
      <xs:element minOccurs="0" name="customerCustom5" type="xs:string" />
      <xs:element minOccurs="0" name="bootstrapIccid" type="xs:string" />
      <xs:element minOccurs="0" name="policyId" type="xs:long" />
      <xs:element minOccurs="0" name="policyTierName" type="xs:string" />
      <xs:element minOccurs="0" name="cfNumber" type="xs:string" />
      <xs:element minOccurs="0" name="cfType" type="xs:string" />
      <xs:element minOccurs="0" name="voiceMailId" type="xs:long" />
      <xs:element minOccurs="0" name="imei" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                This field may have the device IMEI or IMEISV depending on various factors such as your operator's installation as well as the device itself.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="pin1" type="xs:string" />
      <xs:element minOccurs="0" name="pin2" type="xs:string" />
      <xs:element minOccurs="0" name="puk1" type="xs:string" />
      <xs:element minOccurs="0" name="puk2" type="xs:string" />
      <xs:element minOccurs="0" name="msisdnFromApi" type="xs:boolean" />
      <xs:element minOccurs="0" name="mmscProvisioned" type="xs:boolean" />
      <xs:element minOccurs="0" name="globalSimType" type="xs:string" />
      <xs:element minOccurs="0" name="timeZone" type="xs:string" />
      <xs:element minOccurs="0" name="sendOTAOnFirstRegistration" type="xs:boolean" />
      <xs:element minOccurs="0" name="clusterChanges" type="xs:long" />
      <xs:element minOccurs="0" name="clusterChangeTime" type="xs:dateTime" />
      <xs:element minOccurs="0" name="checkedClusterCountryId" type="xs:long" />
      <xs:element minOccurs="0" name="checkedOTATime" type="xs:dateTime" />
      <xs:element minOccurs="0" name="imeiTechType" type="xs:string" />
      <xs:element minOccurs="0" name="customerIMEITechType" type="xs:string" />
      <xs:element minOccurs="0" name="customerIMEI" type="xs:string" />
      <xs:element minOccurs="0" name="ppuID" type="xs:long" />
      <xs:element minOccurs="0" name="orderID" type="xs:long" />
      <xs:element minOccurs="0" name="opmNotificationSent" type="xs:boolean" />
      <xs:element minOccurs="0" name="settlementRatePlanID" type="xs:long" />
      <xs:element minOccurs="0" name="custom10" type="xs:string" />
      <xs:element minOccurs="0" name="custom9" type="xs:string" />
      <xs:element minOccurs="0" name="custom8" type="xs:string" />
      <xs:element minOccurs="0" name="custom7" type="xs:string" />
      <xs:element minOccurs="0" name="custom6" type="xs:string" />
      <xs:element minOccurs="0" name="custom5" type="xs:string" />
      <xs:element minOccurs="0" name="custom4" type="xs:string" />
    </xs:all>
  </xs:complexType>
  <xs:complexType name="RawSimInfo">
    <xs:all>
      <xs:element name="imsi" type="xs:string" />
      <xs:element name="iccid" type="xs:string" />
      <xs:element minOccurs="0" name="pin1" type="xs:string" />
      <xs:element minOccurs="0" name="puk1" type="xs:string" />
      <xs:element minOccurs="0" name="pin2" type="xs:string" />
      <xs:element minOccurs="0" name="puk2" type="xs:string" />
      <xs:element minOccurs="0" name="kienc" type="xs:string" />
      <xs:element minOccurs="0" name="adm3" type="xs:string" />
      <xs:element minOccurs="0" name="adm4" type="xs:string" />
      <xs:element minOccurs="0" name="acc" type="xs:string" />
      <xs:element minOccurs="0" name="dlKey" type="xs:string" />
      <xs:element minOccurs="0" name="msisdn" type="xs:long" />
      <xs:element minOccurs="0" name="dualImsiCapable" type="xs:boolean" />
      <xs:element minOccurs="0" name="dualImsiEnabled" type="xs:boolean" />
      <xs:element minOccurs="0" name="simBound" type="xs:boolean" />
      <xs:element minOccurs="0" name="adm1" type="xs:string" />
      <xs:element minOccurs="0" name="adm2" type="xs:string" />
      <xs:element minOccurs="0" name="areaCode" type="xs:string" />
      <xs:element minOccurs="0" name="countryCode" type="xs:string" />
    </xs:all>
  </xs:complexType>
  <xs:complexType name="SimInfo">
    <xs:all>
      <xs:element name="iccid" type="xs:string" />
      <xs:element minOccurs="0" name="msisdn" type="xs:string" />
      <xs:element minOccurs="0" name="deviceId" type="xs:string" />
      <xs:element minOccurs="0" name="simProfileId" type="xs:long" />
      <xs:element name="acctId" type="xs:long" />
      <xs:element name="live" type="xs:boolean" />
      <xs:element minOccurs="0" name="ratePlanId" type="xs:long" />
      <xs:element minOccurs="0" name="activationDate" type="xs:dateTime" />
      <xs:element minOccurs="0" name="status" type="xs:long" />
      <xs:element minOccurs="0" name="modemId" type="xs:string" />
      <xs:element minOccurs="0" name="customer" type="xs:string" />
      <xs:element minOccurs="0" name="overAgeLimitToOverrideMode" type="xs:long" />
      <xs:element minOccurs="0" name="overAgeLimitReached" type="xs:boolean" />
      <xs:element minOccurs="0" name="overAgeLimit" type="xs:decimal" />
      <xs:element minOccurs="0" name="customerId" type="xs:long" />
      <xs:element minOccurs="0" name="endConsumerIdentity" type="xs:string" />
      <xs:element minOccurs="0" name="commPlanId" type="xs:long" />
      <xs:element minOccurs="0" name="lastStateChange" type="xs:dateTime" />
      <xs:element minOccurs="0" name="testReadyDataLimit" type="xs:long" />
      <xs:element minOccurs="0" name="monthToDateSmsUsage" type="xs:decimal" />
      <xs:element minOccurs="0" name="monthToDateVoiceUsage" type="xs:decimal" />
      <xs:element minOccurs="0" name="userName" type="xs:string" />
      <xs:element minOccurs="0" name="password" type="xs:string" />
      <xs:element minOccurs="0" name="monthToDateDataUsage" type="xs:decimal" />
      <xs:element minOccurs="0" name="oneBox" type="xs:string" />
      <xs:element minOccurs="0" name="dateShipped" type="xs:dateTime" />
      <xs:element minOccurs="0" name="testReadyDataState" type="xs:long" />
      <xs:element minOccurs="0" name="testReadyTimeLimit" type="xs:long" />
      <xs:element minOccurs="0" name="testReadyTimeState" type="xs:long" />
      <xs:element minOccurs="0" name="custom1" type="xs:string" />
      <xs:element minOccurs="0" name="custom2" type="xs:string" />
      <xs:element minOccurs="0" name="custom3" type="xs:string" />
      <xs:element name="version" type="xs:long" />
      <xs:element name="operatorId" type="xs:long" />
      <xs:element minOccurs="0" name="notes" type="xs:string" />
      <xs:element name="networkBlocked" type="xs:boolean" />
      <xs:element minOccurs="0" name="consumerUserId" type="xs:long" />
      <xs:element minOccurs="0" name="dateOneBoxModified" type="xs:dateTime" />
      <xs:element minOccurs="0" name="linePayStatus" type="xs:string" />
      <xs:element minOccurs="0" name="imsi1" type="xs:string" />
      <xs:element minOccurs="0" name="primaryDevice" type="xs:boolean" />
      <xs:element minOccurs="0" name="nickName" type="xs:string" />
      <xs:element minOccurs="0" name="areaCode" type="xs:string" />
      <xs:element minOccurs="0" name="countryCode" type="xs:string" />
      <xs:element minOccurs="0" name="migratedSim" type="xs:boolean" />
      <xs:element minOccurs="0" name="saleDate" type="xs:string" />
    </xs:all>
  </xs:complexType>
  <xs:element name="Session">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SessionInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SimFieldChange">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SimFieldChangeType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="Cdr">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="CdrInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CtdUsage">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="CtdUsageInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CtdZUsage">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="CtdZUsageInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="Past24HDataUsage">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="Past24HDataUsageInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CtdVoiceUsage">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="CtdVoiceUsageInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="Past24HVoiceUsage">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="Past24HVoiceUsageInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CtdVoiceZUsage">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="CtdVoiceZUsageInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CtdCsdUsage">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="CtdCsdUsageInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="Past24HCsdUsage">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="Past24HCsdUsageInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CtdCsdZUsage">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="CtdCsdZUsageInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SmsMoReceived">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SmsMoReceivedInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="QuotaUsageInfo">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="QuotaUsageInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="QuotaExpiration">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="QuotaExpirationType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SmsUsage">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SmsUsageInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="Past24HUssdUsage">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="Past24HUssdUsageInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SimStateChange">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SimStateChangeInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SimImeiChange">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SimImeiChangeInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SimImeiMismatch">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SimImeiMismatchInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="AccountTransfer">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="AccountTransferInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="MsisdnChange">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="MsisdnChangeInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SimRatePlanChange">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SimRatePlanChangeInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SecureSimAlert">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SecureSimAlertInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SimPlanComplete">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SimPlanCompleteInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SimDataLimit">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SimDataLimitInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SimExpiration">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SimExpirationInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="TooManyDailyConnection">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="TooManyDailyConnectionInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="TooFewDailyConnection">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="TooFewDailyConnectionInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="DailySessionConnection">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="DailySessionConnectionInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="TooManyCtdConnection">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="TooManyCtdConnectionInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="NoConnection">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="NoConnectionInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="MonthlyDataUsage">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="MonthlyDataUsageInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="MonthlySmsUsage">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="MonthlySmsUsageInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="MonthlyUssdUsage">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="MonthlyUssdUsageInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="RegistrationInZone">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RegistrationInZoneInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="NetworkRegistrationInZone">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="NetworkRegistrationInZoneInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="LocationTrackingInfo">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="LocationTrackingInfoType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GlobalSimTransferCallbackResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="GlobalSimTransferResponseType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="OrderCallbackResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="OrderResponseType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CIPOrderCallbackResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="CIPOrderResponseType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="OTAMsisdnCallbackResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="OTAMsisdnResponseType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="OTANADResetCallbackResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="OTANADResetResponseType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="OTAPlmnRefreshCallbackResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="OTAPlmnRefreshResponseType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="MsisdnCallbackResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="MsisdnCallbackResponseType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SimLocationAlert">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SimLocationAlertType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="EchoRequest">
    <xs:annotation>
      <xs:documentation>
                Simple test call that returns a given input value as the output
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="value" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="EchoResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="value" type="xs:string" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:group name="EditTerminalRequestParamGroup">
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element minOccurs="0" name="effectiveDate" type="xs:date">
        <xs:annotation>
          <xs:documentation>
                        The scheduled date (CCYY-MM-DD) for the change to be applied in UTC.
                        Default to current date, which indicates the execute the change immediately.
                    </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="targetValue" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                        The target value of the change. Refer to the documentation about TerminalChangeType
                        for a list of possible values for each change type.

                        This element is optional, if omitted indicating the target value is NULL.
                    </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="changeType" type="TerminalChangeType" />
    </xs:sequence>
  </xs:group>
  <xs:group name="EditTerminalResponseParamGroup">
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element name="effectiveDate" type="xs:date" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
  </xs:group>
  <xs:element name="EditTerminalRequest">
    <xs:annotation>
      <xs:documentation>
                Edit a single terminal attribute; the change can happen immediately (effective date is empty or the current date
                in UTC), or it can be scheduled for future.

                If the request failed, a SOAP fault will be returned. Detailed reason about the failure
                will be in the detail section of the fault.

                Here are the list of validation error tokens:

                SYSTEM_ERROR = System error occurred
                INVALID_EFFECTIVE_DATE = Invalid format, cannot enter dates in the past
                ACTIVATION_IN_PAST = Cannot enter dates in the past

                DEVICEID_NULL = No Device Id value specified
                DEVICEID_INVALID_FORMAT = Invalid entry Device ID limited to 50 characters and cannot contain commas (,) or asterisks (*)

                MODEMID_NULL = No Modem ID value specified
                MODEMID_INVALID_FORMAT = Invalid entry Modem ID limited to 40 characters and cannot contain commas (,) or asterisks (*)

                SIMSTATUS_NULL = No SIM Status value specified
                SIMSTATUS_INVALID = Invalid SIM status value
                SIMSTATUS_INVALID_TRANSITION = New SIM value not allowed based on current value
                SIMSTATUS_TRANSITION_UNAUTHORIZED = New SIM value not allowed
                SIMSTATUS_NULL_IN_DB = SIM status is empty in database
                SIMSTATUS_SUSPENDED = Cannot change SIM Status for suspended or fraud review SIM

                RATEPLAN_NULL = No Rate Plan value specified
                RATEPLAN_INVALID = Rate Plan requested not available

                CUSTOMER_SUSPEND_NULL = No Customer Suspend value specified
                CUSTOMER_SUSPEND_INVALID_STATUS = Invalid Parameters

                CUSTOMER_NAME_NULL = No Customer value specified
                CUSTOMER_NAME_TOO_MANY_CHARS = Customer limited to 100 characters
                CUSTOMER_NAME_INVALID_FORMAT = Customer cannot contain commas
                CUSTOMERNAME_INVALID = Customer Name requested not available

                OVERRIDEMODE_INVALID = Invalid Overage Limit Override value
                OVERRIDEMODE_NULL = No value specified
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:group ref="EditTerminalRequestParamGroup" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="EditTerminalResponse">
    <xs:annotation>
      <xs:documentation>
                Response for EditTerminal API call.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:group ref="EditTerminalResponseParamGroup" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="AccountResponseType">
    <xs:annotation>
      <xs:documentation>
            The account-specific response information received from the call to the individual account (on a particular POD)
            that should / would be included in the "global" response to the Global API Request
        </xs:documentation>
    </xs:annotation>
    <xs:attribute name="account" type="xs:string">
      <xs:annotation>
        <xs:documentation>
                The name of the Account that sent this response
            </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="operator" type="xs:string">
      <xs:annotation>
        <xs:documentation>
                The name of the Operator to which the account that sent this response, belongs
            </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:group name="AccountResponseErrorMessageParamGroup">
    <xs:annotation>
      <xs:documentation>
        The account-specific error information received from the call to the individual account (on a particular POD)
        that should / would be included in the "global" response to the Global API Request
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="errorMessage" type="xs:string" />
      <xs:element minOccurs="0" name="errorCode" type="xs:string" />
      <xs:element minOccurs="0" name="error" type="xs:string" />
      <xs:element minOccurs="0" name="exception" type="xs:string" />
      <xs:element minOccurs="0" name="message" type="xs:string" />
    </xs:sequence>
  </xs:group>
  <xs:element name="GlobalAPIFault">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="FaultType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="unbounded" name="AccountResponse">
              <xs:complexType>
                <xs:complexContent mixed="false">
                  <xs:extension base="AccountResponseType">
                    <xs:sequence>
                      <xs:group ref="AccountResponseErrorMessageParamGroup" />
                    </xs:sequence>
                  </xs:extension>
                </xs:complexContent>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:group name="GetTerminalResponseParamGroup">
    <xs:sequence>
      <xs:element minOccurs="0" name="terminal" type="TerminalType" />
    </xs:sequence>
  </xs:group>
  <xs:element name="GlobalGetTerminalDetailsRequest">
    <xs:annotation>
      <xs:documentation>
            The request body to get the attributes of a terminal (given its ICCID) as part of the Global API:
            The terminal can exist in any of the PODs in which the user's account is peered.
            Only one iccid should be provided.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GlobalGetTerminalDetailsResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="1" name="AccountResponse">
              <xs:complexType>
                <xs:complexContent mixed="false">
                  <xs:extension base="AccountResponseType">
                    <xs:sequence>
                      <xs:group ref="GetTerminalResponseParamGroup" />
                    </xs:sequence>
                  </xs:extension>
                </xs:complexContent>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GlobalEditTerminalRequest">
    <xs:annotation>
      <xs:documentation>
        The request body to edit the attributes of a terminal (given its ICCID) as part of the Global API:
        The terminal can exist in any of the PODs in which the user's account is peered.
        Only one iccid should be provided.

        See the API documentation of the Request for the API behaviour when the terminal is not found in any of the PODs
        (Will an API error be returned / thrown?).
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:group ref="EditTerminalRequestParamGroup" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GlobalEditTerminalResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="1" name="AccountResponse">
              <xs:complexType>
                <xs:complexContent mixed="false">
                  <xs:extension base="AccountResponseType">
                    <xs:sequence>
                      <xs:group ref="EditTerminalResponseParamGroup" />
                    </xs:sequence>
                  </xs:extension>
                </xs:complexContent>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalDetailsRequest">
    <xs:annotation>
      <xs:documentation>
                Get the attributes for a list of terminals (given list of iccids).
                At least one iccid should be provided, maximum limit is 50 for performance reasons.

                The returned results are not guaranteed to be in the same ordering as the request.
                Not found terminals will not be part of the result.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccids">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="unbounded" name="iccid" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalDetailsResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="terminals">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="unbounded" name="terminal" type="TerminalType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalRatingRequest">
    <xs:annotation>
      <xs:documentation>
            Returns current standard rate plan and all queued standard rate plans for a SIM
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalRatingResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="terminalRatings">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" maxOccurs="unbounded" name="terminalRating">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="ratePlanName" type="xs:string" />
                        <xs:element minOccurs="0" name="queuePosition" type="xs:long" />
                        <xs:element minOccurs="0" name="expirationDate" type="xs:dateTime" />
                        <xs:element minOccurs="0" name="termLength" type="xs:long" />
                        <xs:element minOccurs="0" name="dataRemaining" type="xs:decimal">
                          <xs:annotation>
                            <xs:documentation>
                                                       Amount of data remaining in MB, primary zone
                                                    </xs:documentation>
                          </xs:annotation>
                        </xs:element>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="QueueTerminalRatePlanRequest">
    <xs:annotation>
      <xs:documentation>
           Add a named plan to the renewal queue
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="renewalRatePlan" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Renewal rateplan name
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="QueueTerminalRatePlanResponse">
    <xs:annotation>
      <xs:documentation>
            Response for QueueTerminalRatePlan API call.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="renewalRatePlan" type="xs:string" />
            <xs:element name="status" type="xs:string" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="RemoveRatePlanFromQueueRequest">
    <xs:annotation>
      <xs:documentation>
           Remove rate plan from the renewal queue
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element minOccurs="1" name="queuePosition" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                Queue position of the rateplan
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="1" name="ratePlan" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                rateplan name to be removed
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="RemoveRatePlanFromQueueResponse">
    <xs:annotation>
      <xs:documentation>
            Response for RemoveRatePlanFromQueue API call.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="ratePlan" type="xs:string" />
            <xs:element name="status" type="xs:string" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetModifiedTerminalsRequest">
    <xs:annotation>
      <xs:documentation>
                Get the terminals accessible to this user which have been modified since the given time (not inclusive).
                If the "since" parameter is omitted, it means return all iccids.

                The result will be a list of iccids ordered by oldest first. This API call is useful for keeping client
                side data in sync with Jasper's.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="0" name="since" type="xs:dateTime" />
            <xs:element minOccurs="0" name="simState" type="SimStateType" />
          </xs:sequence>
          <xs:attribute name="accountId" type="xs:long">
            <xs:annotation>
              <xs:documentation>
                                Specifies the optional AccountId
                            </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetModifiedTerminalsResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="iccids">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" maxOccurs="unbounded" name="iccid" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalsByMsisdnRequest">
    <xs:annotation>
      <xs:documentation>
                Get the ICCID(s) for a list of terminals (given list of msisdns).
                At least one msisdn should be provided, maximum limit is 50 for performance reasons.

                The returned results are not guaranteed to be in the same ordering as the request.
                Not found terminals will not be part of the result.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="msisdns">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="unbounded" name="msisdn" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalsByMsisdnResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="terminals">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="unbounded" name="terminal" type="MsisdnType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalsByImsiRequest">
    <xs:annotation>
      <xs:documentation>
                Get the ICCID(s) for a list of terminals (given list of IMSI).
                At least one IMSI should be provided, maximum limit is 50 for performance reasons.

                The returned results are not guaranteed to be in the same ordering as the request.
                Not found terminals will not be part of the result.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="imsi">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="unbounded" name="imsi" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalsByImsiResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="terminals">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="unbounded" name="terminal" type="ImsiToIccidType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalsBySecureSimIdRequest">
    <xs:annotation>
      <xs:documentation>
                Get the terminals accessible to this user given a SecureSIM Id.

                The result will be a list of iccids ordered by oldest first. This API call is useful for getting the ICCIDs
                for a given SecureSIM id.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="secureSimId" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalsBySecureSimIdResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="iccids">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" maxOccurs="unbounded" name="iccid" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalUsageRequest">
    <xs:annotation>
      <xs:documentation>
                Retrieves the terminal usage of a given month (completed billing
                cycle only) for the terminal identified by ICCID. The return result contains total and billable volumes
                for data, voice and SMS. To get current month's usage of a terminal, please use GetTerminalDetails call
                and the MonthToDateUsage fields.

                If there is no terminal usage found for the given terminal, a SOAP fault with error code 200200 will be
                returned.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element minOccurs="0" name="cycleStartDate" type="xs:date">
              <xs:annotation>
                <xs:documentation>
                                    First day of the billing cycle (CCYY-MM-DD) in UTC, 2006-08-01Z and 2006-08-01+00:00
                                    are the same. It is mandatory to provide a history billing cycle start date. If no value
                                    is provided, a SOAP fault with error code 200200 will be returned indicating no terminal usage
                                    is found.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalUsageResponse">
    <xs:annotation>
      <xs:documentation>
                Response for GetTerminalUsage API call.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element minOccurs="0" name="terminalId" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Terminal's Terminal ID, optional.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="customer" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Terminal's Customer Name, optional.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="endConsumerId" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Terminal's End Consumer ID, optional.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="totalDataVolume" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                                    Total data volume in MB.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="billableDataVolume" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                                    The billable data volume in MB.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="cycleStartDate" type="xs:date">
              <xs:annotation>
                <xs:documentation>First day of the billing cycle (CCYY-MM-DD) in UTC.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="billable" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>
                                    Indicating if the usage is billable.
                                    For current billing cyle, it will be "false" since the billing calculation is not final yet.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="totalSMSVolume" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                                    Total SMS volume in messages.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="totalVoiceVolume" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                                    Total Voice volume in Secs.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="billableSMSVolume" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                                    Billable SMS volume in messages.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="billableVoiceVolume" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                                    Billable Voice volume in Secs.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="ratePlan" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Rateplan name.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="eventsUsage" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                                    Events data usage in MB.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="totalEvents" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                    Total number of events
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalUsageDataDetailsRequest">
    <xs:annotation>
      <xs:documentation>
            Retrieves the terminal data usage details of a given month for the terminal identified by ICCID. The return result contains both billable and non-billable usages.
            
            If there is no terminal usage found for the given terminal, a SOAP fault with error code 200200 will be
            returned.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="cycleStartDate" type="xs:date">
              <xs:annotation>
                <xs:documentation>
                                First day of the billing cycle (CCYY-MM-DD) in UTC, 2006-08-01Z and 2006-08-01+00:00
                                are the same. It is mandatory to provide a history billing cycle start date. If no value
                                is provided, a SOAP fault with error code 200200 will be returned indicating no terminal usage
                                details is found.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="pageNumber" type="xs:int">
              <xs:annotation>
                <xs:documentation>
                                If the optional pageNumber is passed in the request, results will be paginated
                                and totalPages will be returned in the response. Else, no pagination will occur and
                                totalPages will have a value of 1 in the response.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalUsageDataDetailsResponse">
    <xs:annotation>
      <xs:documentation>
            Response for GetTerminalUsageDetails API call.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="usageDetails">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" maxOccurs="unbounded" name="usageDetail" type="DataUsageDetailType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="totalPages" type="xs:int" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalUsageSmsDetailsRequest">
    <xs:annotation>
      <xs:documentation>
            Retrieves the terminal SMS usage details of a given month for the terminal identified by ICCID. The return result contains both billable and non-billable usages.
            
            If there is no terminal usage found for the given terminal, a SOAP fault with error code 200200 will be
            returned.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="cycleStartDate" type="xs:date">
              <xs:annotation>
                <xs:documentation>
                                First day of the billing cycle (CCYY-MM-DD) in UTC, 2006-08-01Z and 2006-08-01+00:00
                                are the same. It is mandatory to provide a history billing cycle start date. If no value
                                is provided, a SOAP fault with error code 200200 will be returned indicating no terminal usage
                                details is found.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalUsageSmsDetailsResponse">
    <xs:annotation>
      <xs:documentation>
            Response for GetTerminalUsageSmsDetails API call.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="smsUsageDetails">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" maxOccurs="unbounded" name="smsUsageDetail" type="SmsUsageDetailType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalUsageVoiceDetailsRequest">
    <xs:annotation>
      <xs:documentation>
            Retrieves the terminal voice usage details of a given month for the terminal identified by ICCID. The return result contains both billable and non-billable usages.

            If there is no terminal usage found for the given terminal, a SOAP fault with error code 200200 will be
            returned.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="cycleStartDate" type="xs:date">
              <xs:annotation>
                <xs:documentation>
                                First day of the billing cycle (CCYY-MM-DD) in UTC, 2006-08-01Z and 2006-08-01+00:00
                                are the same. It is mandatory to provide a history billing cycle start date. If no value
                                is provided, a SOAP fault with error code 200200 will be returned indicating no terminal usage
                                details is found.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalUsageVoiceDetailsResponse">
    <xs:annotation>
      <xs:documentation>
            Response for GetTerminalUsageVoiceDetails API call.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="voiceUsageDetails">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" maxOccurs="unbounded" name="voiceUsageDetail" type="VoiceUsageDetailType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="EditTerminalRatingRequest">
    <xs:annotation>
      <xs:documentation>
            Edit a terminal's rating attributes
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element minOccurs="0" name="termStartDate" type="xs:dateTime">
              <xs:annotation>
                <xs:documentation>
                                Term start date and time (CCYY-MM-DD hh24.mi.ss.zzz) in UTC.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="termEndDate" type="xs:dateTime">
              <xs:annotation>
                <xs:documentation>
                                Term end date and time (CCYY-MM-DD hh24.mi.ss.zzz) in UTC.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="renewalMode" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Renewal Mode should be one of the following Letters
                                A : AutoRenew
                                D : Deactivate
                                N : NamedPlan
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="renewalRatePlan" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Renewal rateplan name if renewal mode is NamedPlan if not, this
                                will be ignored
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="EditTerminalRatingResponse">
    <xs:annotation>
      <xs:documentation>
            Response for EditTerminal API call.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="status" type="xs:string" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetSessionInfoRequest">
    <xs:annotation>
      <xs:documentation>
                Get the session details for a terminal (given an iccid).
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="unbounded" name="iccid" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetSessionInfoResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="sessionInfo">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" maxOccurs="unbounded" name="session" type="SessionInfoType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:group name="AvailableRatePlansResponseParamGroup">
    <xs:sequence>
      <xs:element name="AvailableEvents">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="AvailableEvent">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="EventName" type="xs:string" />
                  <xs:element name="Version" type="xs:long" />
                  <xs:element minOccurs="0" name="Term" type="xs:long" />
                  <xs:element name="Price" type="xs:decimal" />
                  <xs:element name="IncludedData" type="xs:decimal" />
                  <xs:element name="DataOverageRate" type="xs:decimal" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
  </xs:group>
  <xs:element name="GetAvailableEventsRequest">
    <xs:annotation>
      <xs:documentation>                Get all events exposed to the account, given an account ID.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAvailableEventsResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:group ref="AvailableRatePlansResponseParamGroup" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GlobalGetAvailableEventRatePlansRequest">
    <xs:annotation>
      <xs:documentation>
            Request object for Gloal API that returns the available event rate plans for a given ICCID.
            The terminal can exist in any of the PODs in which the user's account is peered.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GlobalGetAvailableEventRatePlansResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="1" name="AccountResponse">
              <xs:complexType>
                <xs:complexContent mixed="false">
                  <xs:extension base="AccountResponseType">
                    <xs:sequence>
                      <xs:group ref="AvailableRatePlansResponseParamGroup" />
                    </xs:sequence>
                  </xs:extension>
                </xs:complexContent>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ActivateTerminalEventRequest">
    <xs:annotation>
      <xs:documentation>                Triggers activation of an event for a SIM based on the effective date</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="eventName" type="xs:string" />
            <xs:element minOccurs="0" name="effectiveDate" type="xs:dateTime">
              <xs:annotation>
                <xs:documentation>
                                The scheduled date time (CCYY-MM-DD hh24.mi.ss.zzz) in UTC
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ActivateTerminalEventResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="status" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GlobalActivateTerminalEventRatePlanRequest">
    <xs:annotation>
      <xs:documentation>
            Request object for Global API that triggers the activation of an event rate plan for a SIM immediately.
            The terminal can exist in any of the PODs in which the user's account is peered.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="eventName" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GlobalActivateTerminalEventRatePlanResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="1" name="AccountResponse">
              <xs:complexType>
                <xs:complexContent mixed="false">
                  <xs:extension base="AccountResponseType">
                    <xs:sequence>
                      <xs:element name="iccid" type="xs:string" />
                      <xs:element name="status" type="xs:string" />
                    </xs:sequence>
                  </xs:extension>
                </xs:complexContent>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:group name="TerminalEventRatePlansResponseParamGroup">
    <xs:sequence>
      <xs:element name="terminalEvents">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="terminalEvent">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="eventInstanceId" type="xs:long" />
                  <xs:element name="iccid" type="xs:string" />
                  <xs:element name="eventName" type="xs:string" />
                  <xs:element name="createdDate" type="xs:dateTime" />
                  <xs:element name="activeStatus" type="xs:string" />
                  <xs:element name="startDate" type="xs:dateTime" />
                  <xs:element name="endDate" type="xs:dateTime" />
                  <xs:element name="price" type="xs:decimal" />
                  <xs:element minOccurs="0" name="totalPrimaryIncludedData" type="xs:decimal">
                    <xs:annotation>
                      <xs:documentation>
                                            Amount of data included in MB, primary zone
                                        </xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element minOccurs="0" name="primaryDataRemaining" type="xs:decimal">
                    <xs:annotation>
                      <xs:documentation>
                                            Amount of data remaining in MB, primary zone
                                        </xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element minOccurs="0" name="totalPrimaryIncludedSMS" type="xs:decimal">
                    <xs:annotation>
                      <xs:documentation>
                                            Amount of SMS included, primary zone
                                        </xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element minOccurs="0" name="primarySMSRemaining" type="xs:decimal">
                    <xs:annotation>
                      <xs:documentation>
                                            Amount of SMS remaining, primary zone
                                        </xs:documentation>
                    </xs:annotation>
                  </xs:element>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:any minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:element name="GetTerminalEventsRequest">
    <xs:annotation>
      <xs:documentation>                 Returns list of events for a SIM; Includes historic events, active events and future scheduled events.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element minOccurs="0" name="since" type="xs:dateTime" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalEventsResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:group ref="TerminalEventRatePlansResponseParamGroup" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GlobalGetTerminalEventRatePlansRequest">
    <xs:annotation>
      <xs:documentation>
            Request object for Gloal API that returns list of events for a SIM; Includes historic events, active events and future scheduled events.
            The terminal can exist in any of the PODs in which the user's account is peered.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element minOccurs="0" name="since" type="xs:dateTime" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GlobalGetTerminalEventRatePlansResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="1" name="AccountResponse">
              <xs:complexType>
                <xs:complexContent mixed="false">
                  <xs:extension base="AccountResponseType">
                    <xs:sequence>
                      <xs:group ref="TerminalEventRatePlansResponseParamGroup" />
                    </xs:sequence>
                  </xs:extension>
                </xs:complexContent>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:group name="GetTerminalLatestRegistrationRequestParamGroup">
    <xs:sequence>
      <xs:element name="imsi" type="xs:string" />
    </xs:sequence>
  </xs:group>
  <xs:group name="GetTerminalLatestRegistrationResponseParamGroup">
    <xs:sequence>
      <xs:element name="registrationInfo">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="imsi" type="xs:string" />
            <xs:element minOccurs="0" name="gtAddr" type="xs:string" />
            <xs:element minOccurs="0" name="sgsn" type="xs:boolean" />
            <xs:element minOccurs="0" name="vlr" type="xs:boolean" />
            <xs:element minOccurs="0" name="msc" type="xs:boolean" />
            <xs:element minOccurs="0" name="eventDate" type="xs:dateTime" />
            <xs:element minOccurs="0" name="carrierName" type="xs:string" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
  </xs:group>
  <xs:element name="GetTerminalLatestRegistrationRequest">
    <xs:annotation>
      <xs:documentation>Returns information about the latest location update for a SIM.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:group ref="GetTerminalLatestRegistrationRequestParamGroup" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalLatestRegistrationResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:group ref="GetTerminalLatestRegistrationResponseParamGroup" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:group name="GetTerminalLatestNetworkRegistrationRequestParamGroup">
    <xs:sequence>
      <xs:element name="imsi" type="xs:string" />
    </xs:sequence>
  </xs:group>
  <xs:group name="GetTerminalLatestNetworkRegistrationResponseParamGroup">
    <xs:sequence>
      <xs:element name="registrationEvents">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="registrationInfo">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" name="imsi" type="xs:string" />
                  <xs:element minOccurs="0" name="gtAddr" type="xs:string" />
                  <xs:element minOccurs="0" name="sgsn" type="xs:boolean" />
                  <xs:element minOccurs="0" name="vlr" type="xs:boolean" />
                  <xs:element minOccurs="0" name="msc" type="xs:boolean" />
                  <xs:element minOccurs="0" name="eventDate" type="xs:dateTime" />
                  <xs:element minOccurs="0" name="carrierName" type="xs:string" />
                  <xs:element minOccurs="0" name="mme_s4sgsn" type="xs:boolean" />
                  <xs:element minOccurs="0" name="hostName" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
  </xs:group>
  <xs:element name="GetTerminalLatestNetworkRegistrationRequest">
    <xs:annotation>
      <xs:documentation>Returns information about the latest location update for a SIM.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:group ref="GetTerminalLatestNetworkRegistrationRequestParamGroup" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalLatestNetworkRegistrationResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:group ref="GetTerminalLatestNetworkRegistrationResponseParamGroup" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GlobalGetTerminalLatestRegistrationRequest">
    <xs:annotation>
      <xs:documentation>
            Request object for Gloal API that returns information about the latest location update for a SIM.
            The terminal can exist in any of the PODs in which the user's account is peered.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:group ref="GetTerminalLatestRegistrationRequestParamGroup" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GlobalGetTerminalLatestRegistrationResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="1" name="AccountResponse">
              <xs:complexType>
                <xs:complexContent mixed="false">
                  <xs:extension base="AccountResponseType">
                    <xs:sequence>
                      <xs:group ref="GetTerminalLatestRegistrationResponseParamGroup" />
                    </xs:sequence>
                  </xs:extension>
                </xs:complexContent>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="DeleteTerminalEventRequest">
    <xs:annotation>
      <xs:documentation>                 Deletes a single forward-schedule event instance based on the unique ID of the event instance; This action may only be issued against an existing event instance that has not yet started (ie, start date/time &gt; current date/time); If the call is attempted against an event instance that has already started, an error status indicating that condition is returned.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="eventInstanceId" type="xs:long" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="DeleteTerminalEventResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="eventInstanceId" type="xs:long" />
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="status" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:group name="SendSMSRequestParamGroup">
    <xs:sequence>
      <xs:element name="sentToIccid" type="xs:string" />
      <xs:element name="messageText" type="xs:string" />
      <xs:element minOccurs="0" name="tpvp" type="xs:unsignedByte">
        <xs:annotation>
          <xs:documentation>
                    Specifies validity period for SMS message
                </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:group name="SendSMSResponseParamGroup">
    <xs:sequence>
      <xs:element name="smsMsgId" type="xs:long" />
      <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
    </xs:sequence>
  </xs:group>
  <xs:element name="SendSMSRequest">
    <xs:annotation>
      <xs:documentation>
             Send SMS message to device. Message length should be less than 160 characters

             The response will be smsMsgId.
         </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:group ref="SendSMSRequestParamGroup" />
          </xs:sequence>
          <xs:attribute name="messageTextEncoding" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                             Composite field specifying the encoding format of the message text being supplied as input to the API call (defaults to LITERAL) as well as the desired encoding scheme to be used while submitting the message to the SMSC. Supported values include LITERAL, BASE64, LITERAL_IRA, BASE64_IRA, LITERAL_BINARY, BASE64_BINARY, LITERAL_GSM7, BASE64_GSM7
                         </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SendSMSResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:group ref="SendSMSResponseParamGroup" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GlobalSendSMSRequest">
    <xs:annotation>
      <xs:documentation>
            Request object for Gloal API that sends SMS message to the given device. Message length should be less than 160 characters
            The response will be smsMsgId.
            The terminal can exist in any of the PODs in which the user's account is peered.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:group ref="SendSMSRequestParamGroup" />
          </xs:sequence>
          <xs:attribute name="messageTextEncoding" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                            Composite field specifying the encoding format of the message text being supplied as input to the API call (defaults to LITERAL) as well as the desired encoding scheme to be used while submitting the message to the SMSC. Supported values include LITERAL, BASE64, LITERAL_IRA, BASE64_IRA, LITERAL_BINARY, BASE64_BINARY, LITERAL_GSM7, BASE64_GSM7
                        </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GlobalSendSMSResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="1" name="AccountResponse">
              <xs:complexType>
                <xs:complexContent mixed="false">
                  <xs:extension base="AccountResponseType">
                    <xs:sequence>
                      <xs:group ref="SendSMSResponseParamGroup" />
                    </xs:sequence>
                  </xs:extension>
                </xs:complexContent>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SendBulkSMSRequest">
    <xs:annotation>
      <xs:documentation>
             Send SMS message to one or more device. Message length should be less than 160 characters.
             The response will be smsMsgId for each sms.
         </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccidList">
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" name="iccid" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="messageText" type="xs:string" />
            <xs:element minOccurs="0" name="tpvp" type="xs:unsignedByte">
              <xs:annotation>
                <xs:documentation>
                                 Specifies validity period for SMS message
                             </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
          <xs:attribute name="messageTextEncoding" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                                Composite field specifying the encoding format of the message text being supplied as input to the API call (defaults to LITERAL) as well as the desired encoding scheme to be used while submitting the message to the SMSC. Supported values include LITERAL, BASE64, LITERAL_IRA, BASE64_IRA, LITERAL_BINARY, BASE64_BINARY, LITERAL_GSM7, BASE64_GSM7
                            </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SendBulkSMSResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="smsMsgIdList">
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" name="smsMsgId" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SendSMSToMsisdnRequest">
    <xs:annotation>
      <xs:documentation>
            Send SMS message to device. Message length should be less than 160 characters
            The response will be smsMsgId.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="sentToMsisdn" type="xs:string" />
            <xs:element name="messageText" type="xs:string" />
            <xs:element minOccurs="0" name="tpvp" type="xs:unsignedByte">
              <xs:annotation>
                <xs:documentation>
                                Specifies validity period for SMS message
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
          <xs:attribute name="messageTextEncoding" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                            Composite field specifying the encoding format of the message text being supplied as input to the API call (defaults to LITERAL) as well as the desired encoding scheme to be used while submitting the message to the SMSC. Supported values include LITERAL, BASE64, LITERAL_IRA, BASE64_IRA, LITERAL_BINARY, BASE64_BINARY, LITERAL_GSM7, BASE64_GSM7
                        </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SendSMSToMsisdnResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="smsMsgId" type="xs:long" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SendBulkSMSToMsisdnRequest">
    <xs:annotation>
      <xs:documentation>
            Send SMS message to one or more device. Message length should be less than 160 characters.
            The response will be smsMsgId for each sms.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="msisdnList">
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" name="msisdn" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="messageText" type="xs:string" />
            <xs:element minOccurs="0" name="tpvp" type="xs:unsignedByte">
              <xs:annotation>
                <xs:documentation>
                                Specifies validity period for SMS message
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
          <xs:attribute name="messageTextEncoding" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                            Composite field specifying the encoding format of the message text being supplied as input to the API call (defaults to LITERAL) as well as the desired encoding scheme to be used while submitting the message to the SMSC. Supported values include LITERAL, BASE64, LITERAL_IRA, BASE64_IRA, LITERAL_BINARY, BASE64_BINARY, LITERAL_GSM7, BASE64_GSM7
                        </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SendBulkSMSToMsisdnResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="smsMsgIdList">
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" name="smsMsgId" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetSMSDetailsRequest">
    <xs:annotation>
      <xs:documentation>
                Get the SMS Message Details for list of given smsmsgids.

                The return result are not guaranteed to be in same ordering as request.
                Not found messages will not be part of the result.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="smsMsgIds">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="unbounded" name="smsMsgId" type="xs:long" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
          <xs:attribute name="messageTextEncoding" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                                Specifies encoding format of message text - LITERAL(default) or BASE64.
                                Note: Text retrieved will be encoded in the format specified
                            </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetSMSDetailsResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="smsMessages">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" maxOccurs="unbounded" name="smsMessage" type="SmsMessageType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetModifiedSMSRequest">
    <xs:annotation>
      <xs:documentation>
                Get SmsMessageIds that have been sent/received for the given date range.
                If "iccid" parameter is omitted, it means return messageids across all visible terminals.
                If "fromDate" parameter is omitted, it means return messageids starting at the beginning of time.
                If "toDate" parameter is omitted, it means return messageids up to the current date.

                The result will be a list of smsmsgids.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="0" name="iccid" type="xs:string" />
            <xs:element minOccurs="0" name="fromDate" type="xs:dateTime" />
            <xs:element minOccurs="0" name="toDate" type="xs:dateTime" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetModifiedSMSResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="smsMsgIds">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" maxOccurs="unbounded" name="smsMsgId" type="xs:long" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAlertsRequest">
    <xs:annotation>
      <xs:documentation>
                Get the Alerts accessible to this user which have been added since the given time (not inclusive).
                If the "since" parameter is omitted, it means return all alertIds.

                The result will be a list of alertIds ordered by oldest first. This API call is useful for keeping client
                side data in sync with Jasper's.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="0" name="since" type="xs:dateTime" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAlertsResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="alertIds">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" maxOccurs="unbounded" name="alertId" type="xs:long" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAlertDetailsRequest">
    <xs:annotation>
      <xs:documentation>
                Get the alert details (given list of alert ids).
                At least one alert id should be provided, maximum limit is 50 for performance reasons.

                The returned results are not guaranteed to be in the same ordering as the request.
                Not found alerts will not be part of the result.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="alertIds">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="unbounded" name="alertId" type="xs:long" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAlertDetailsResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="alerts">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="unbounded" name="alert" type="AlertDetailType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetInvoiceRequest">
    <xs:annotation>
      <xs:documentation>
                Retrieves the invoice of a given month for a given Account.
                A SOAP fault will be thrown if the requested invoice does not exist.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="accountId" type="xs:long" />
            <xs:element minOccurs="0" name="cycleStartDate" type="xs:date">
              <xs:annotation>
                <xs:documentation>
                                    First day of the billing cycle (CCYY-MM-DD) in UTC, 2006-08-01Z and 2006-08-01+00:00
                                    are the same. If no value if given, defaults to current month.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetInvoiceResponse">
    <xs:annotation>
      <xs:documentation>
                Response for GetInvoice API call.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="accountId" type="xs:long" />
            <xs:element name="invoiceId" type="xs:long" />
            <xs:element name="currency" type="xs:string" />
            <xs:element name="invoiceDate" type="xs:date">
              <xs:annotation>
                <xs:documentation>The date when the invoice is generated (CCYY-MM-DD) in
                                    UTC.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="dueDate" type="xs:date">
              <xs:annotation>
                <xs:documentation>Invoice due date (CCYY-MM-DD) in UTC.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="cycleStartDate" type="xs:date">
              <xs:annotation>
                <xs:documentation>
                                    First day of the billing cycle (CCYY-MM-DD) in UTC.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="cycleEndDate" type="xs:date">
              <xs:annotation>
                <xs:documentation>
                                    Last day of the billing cycle (CCYY-MM-DD) in UTC.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="totalTerminals" type="xs:long" />
            <xs:element name="dataVolume" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                                    The billable data volume in MB.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="subscriptionCharge" type="xs:decimal" />
            <xs:element name="overageCharge" type="xs:decimal" />
            <xs:element name="totalCharge" type="xs:decimal" />
            <xs:element name="smsVolume" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                                    The billable sms volume.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="smsCharge" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                                    SMS Charge.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="voiceVolume" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                                    The billable voice volume in Secs.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="voiceCharge" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                                    Voice Charge.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="otherCharge" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                                    Other Charge.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="totalEvents" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                    Total number of events
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="eventsCharge" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                                    Events Charge
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="activationCharge" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                                    Activation Charge
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="discountApplied" type="xs:decimal">
              <xs:annotation>
                <xs:documentation>
                                    Discount Applied
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CreateAccountRequest">
    <xs:annotation>
      <xs:documentation>
            Creates an account with the given information.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="serviceProvider" type="xs:string" />
            <xs:element name="accountName" type="xs:string" />
            <xs:element name="accountType" type="xs:string" />
            <xs:element name="currencyCode" type="xs:string" />
            <xs:element name="taxId" type="xs:string" />
            <xs:element minOccurs="0" name="salesForceAccountName" type="xs:string" />
            <xs:element minOccurs="0" name="createSalesForceAccount" type="xs:boolean" />
            <xs:element name="defaultCommunicationPlan" type="xs:string" />
            <xs:element name="defaultRatePlan" type="xs:string" />
            <xs:element minOccurs="0" name="createDefaultRatePlan" type="xs:boolean" />
            <xs:element minOccurs="0" name="billingCycleStart" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                A Valid Schedule Name.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="primaryContact" type="ContactType" />
            <xs:element name="billingContact" type="ContactType" />
            <xs:element name="billingAddress" type="AddressType" />
            <xs:element name="shippingAddress" type="AddressType" />
            <xs:element name="timezone" type="xs:string" />
            <xs:element name="preferredLanguage" type="xs:string" />
            <xs:element minOccurs="0" name="notes" type="xs:string" />
            <xs:element minOccurs="0" name="supportEmail" type="xs:string" />
            <xs:element minOccurs="0" name="supportPhone" type="xs:string" />
            <xs:element minOccurs="0" name="devKitType" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Valid values for the development kit type are as follows:
                                ATT_BENCHMARK, ATT_ERICSSON, ROGERS, KPN_BENCHMARK, TELCEL_BENCHMARK.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="showJasperSupport" type="xs:boolean" />
            <xs:element minOccurs="0" name="showSpSupport" type="xs:boolean" />
            <xs:element minOccurs="0" name="showAcctSupport" type="xs:boolean" />
            <xs:element minOccurs="0" name="regionId" type="xs:string" />
            <xs:element minOccurs="0" name="accountSegment" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CreateAccountResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="accountId" type="xs:long" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAccountIdByAcctNameRequest">
    <xs:annotation>
      <xs:documentation>
                Returns the account ID for a given account name.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="accountName" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Name of the account
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAccountIdByAcctNameResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="accountId" type="xs:long" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAccountIdByOpAcctIdRequest">
    <xs:annotation>
      <xs:documentation>
                Returns the account ID for a given operator account ID.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="operatorAccountId" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Operator Account ID of the account
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAccountIdByOpAcctIdResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="accountId" type="xs:long" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAccountsRequest">
    <xs:annotation>
      <xs:documentation>
                Get list of Accounts
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAccountsResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="accountIds">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" maxOccurs="unbounded" name="accountId" type="xs:long" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAccountDetailsRequest">
    <xs:annotation>
      <xs:documentation>
                Get the details for a list of Accounts (given list of accountids).
                At least one accountid should be provided, maximum limit is 50 for performance reasons.

                The returned results are not guaranteed to be in the same ordering as the request.
                Not found Accounts will not be part of the result.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="accountids">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="unbounded" name="accountid" type="xs:long" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAccountDetailsResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="accounts">
              <xs:complexType>
                <xs:sequence minOccurs="1" maxOccurs="unbounded">
                  <xs:element name="account" type="AccountType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAccountDetailsTelkomselLBSRequest">
    <xs:annotation>
      <xs:documentation>
                Get the details for a list of Accounts (given list of accountids).
                At least one accountid should be provided, maximum limit is 50 for performance reasons.

                The returned results are not guaranteed to be in the same ordering as the request.
                Not found Accounts will not be part of the result.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="accountids">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="unbounded" name="accountid" type="xs:long" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAccountDetailsTelkomselLBSResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="accounts">
              <xs:complexType>
                <xs:sequence minOccurs="1" maxOccurs="unbounded">
                  <xs:element name="account" type="AccountType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetCoverageMapRequest">
    <xs:annotation>
      <xs:documentation>
                Get the URL of the coverage map image for a given address.
                If the address is invalid, no mapUrl will be returned, and
                matchType will indicate the problem with the address.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="address" type="xs:string">
              <xs:annotation>
                <xs:documentation>The full address (street address, city, state, optional zip code) or just the zip code</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetCoverageMapResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="1" name="mapUrl" type="xs:string">
              <xs:annotation>
                <xs:documentation>The URL of the map image</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="matchType" type="xs:string">
              <xs:annotation>
                <xs:documentation>The type of match (ex. STREET, ZIP, etc.) if the address was found, or the type of error (ex. ERROR_PARSE, ERROR_NOT_FOUND, etc.) if the address was invalid</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetCoverageMapByLatLongRequest">
    <xs:annotation>
      <xs:documentation>
                Get the URL of the coverage map image for a given latitude/longitude.
                If the latitude or longitude is invalid, a SOAP fault will be returned.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="x" type="xs:double">
              <xs:annotation>
                <xs:documentation>longitude in WGS84 decimal degrees</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="y" type="xs:double">
              <xs:annotation>
                <xs:documentation>latitude in WGS84 decimal degrees</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetCoverageMapByLatLongResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="mapUrl" type="xs:string">
              <xs:annotation>
                <xs:documentation>The URL of the map image</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetCoverageRequest">
    <xs:annotation>
      <xs:documentation>
                Get the coverage information for a given address.
                If the address is invalid, matchType will be a string that starts with "ERROR_" (ERROR_PARSE, ERROR_NOT_FOUND, etc.), indicating the problem with the address.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="address" type="xs:string">
              <xs:annotation>
                <xs:documentation>The full address (street address, city, state, optional zip code) or just the zip code</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetCoverageResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="live" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>true if there is coverage at this location, false otherwise</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="comingSoon" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>true if coverage will be available at this location soon, false otherwise; note that comingSoon = false for locations with current coverage (live = true)</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="matchType" type="xs:string">
              <xs:annotation>
                <xs:documentation>The type of match (ex. STREET, ZIP, etc.) if the address was found, or the type of error (ex. ERROR_PARSE, ERROR_NOT_FOUND, etc.) if the address was invalid</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="retiring" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>true if coverage is being retired at this location, false otherwise</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetCoverageByLatLongRequest">
    <xs:annotation>
      <xs:documentation>
                Get the coverage information for a given latitude/longitude. Only
                locations within the US and Mexico are supported.
                If the latitude or longitude is invalid, a SOAP fault will be returned.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="x" type="xs:double">
              <xs:annotation>
                <xs:documentation>longitude in WGS84 decimal degrees</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="y" type="xs:double">
              <xs:annotation>
                <xs:documentation>latitude in WGS84 decimal degrees</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetCoverageByLatLongResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="live" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>true if there is coverage at this location, false otherwise</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="comingSoon" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>true if coverage will be available at this location soon, false otherwise; note that comingSoon = false for locations with current coverage (live = true)</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="retiring" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>true if coverage is being retired at this location, false otherwise</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetNetworkAccessConfigRequest">
    <xs:annotation>
      <xs:documentation>
                GetNetworkAccessConfig takes an ICCID and returns the associated Network Access ID.

                The result will be a Network Access ID.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="unbounded" name="iccid" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetNetworkAccessConfigResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="nacIds">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" maxOccurs="unbounded" name="nacId" type="nacIdType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAllNetworkAccessConfigsRequest">
    <xs:annotation>
      <xs:documentation>
                GetAllNetworkAccessConfigs returns all the network access configs available.

                The result will be a list of nacIds.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAllNetworkAccessConfigsResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="nacIds">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" maxOccurs="unbounded" name="nacId" type="xs:long" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetNetworkAccessConfigDetailsRequest">
    <xs:annotation>
      <xs:documentation>
                Get the Network Access Config details for a given list of Network Access Config IDs.
                At least one nacID should be provided, maximum limit is 50 for performance reasons.

                The returned results are not guaranteed to be in the same ordering as the request.
                Not found nacIDs will not be part of the result.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="nacIds">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="unbounded" name="nacId" type="xs:long" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetNetworkAccessConfigDetailsResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="nacs">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" maxOccurs="unbounded" name="nac" type="nacType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="EditNetworkAccessConfigRequest">
    <xs:annotation>
      <xs:documentation>
                Change the ICCID's Network Access Config to the target Network Access Config.

                The result will be the ICCID and the effective date of the change.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="nacId" type="xs:long" />
            <xs:element minOccurs="0" name="effectiveDate" type="xs:date">
              <xs:annotation>
                <xs:documentation>
                                    The scheduled date (CCYY-MM-DD) for the change to be applied in UTC.
                                    Default to current date, which indicates the execute the change immediately.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="EditNetworkAccessConfigResponse">
    <xs:annotation>
      <xs:documentation>
                Response for EditNetworkAcessConfig API call.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="effectiveDate" type="xs:date" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SendIpMessageRequest">
    <xs:annotation>
      <xs:documentation>
                 Send IP network message to device. Any error will be returned as SOAP fault.
                 If the delivery was successful, the response message from the device will be returned (usually BASE64 encoded). 
             </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="protocol" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    TCP or UDP
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="port" type="xs:int" />
            <xs:element name="message" type="xs:string" />
            <xs:element name="responseTimeout" type="xs:int">
              <xs:annotation>
                <xs:documentation>
                                     How long (in ms) should the server wait for an response from the device.
                                     Maximum 10000 (10s).
                                 </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
          <xs:attribute name="messageEncoding" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                                    Specifies encoding format of message text - LITERAL(default) or BASE64.
                                    Note: Message has to be encoded in the format specified
                                </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SendIpMessageResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="responseMessage" type="xs:string" />
          </xs:sequence>
          <xs:attribute name="messageEncoding" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                                    Specifies encoding format of message text - LITERAL(default) or BASE64.
                                    Note: Response message will be encoded in the format specified
                                </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAuthTokenRequest">
    <xs:annotation>
      <xs:documentation>
                Gets the authentication token for the given local and remote user identifiers.
                This token is encrypted using the requesting server's public key and needs to
                be decrypted by the requesting server using its private key.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="localUser" type="UserIdentifierType">
              <xs:annotation>
                <xs:documentation>
                                    Information about the user on this Control Center instance.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="remoteUser" type="UserIdentifierType">
              <xs:annotation>
                <xs:documentation>
                                    Information about the user on another Control Center instance.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="linkageType" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                    Linkage type, either regular or account-peering.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAuthTokenResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="authToken" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ActivateAuthTokenRequest">
    <xs:annotation>
      <xs:documentation>
                Gets the authentication token for the given local and remote user identifiers.
                This token is encrypted using the requesting server's public key and needs to
                be decrypted by the requesting server using its private key.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="localUser" type="UserIdentifierType">
              <xs:annotation>
                <xs:documentation>
                                    Information about the user on this Control Center instance.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="remoteUser" type="UserIdentifierType">
              <xs:annotation>
                <xs:documentation>
                                    Information about the user on another Control Center instance.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="authToken" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ActivateAuthTokenResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:boolean" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="SelectVirtualSubAndAssignMSISDNStatus">
    <xs:annotation>
      <xs:documentation>
            Satus:
            "COMPLETE": Vivo request successfully created
            "PENDING": Vivo request is in the process of being created
            "FAILED": Failed creating new vivo request
        </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="PENDING" />
      <xs:enumeration value="COMPLETE" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="msisdnAssignmentStatus">
    <xs:annotation>
      <xs:documentation>
        Satus:
        "Exceed": Vivo retry have exceed allow times.
    </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="MSISDN_COUNTER_LIMIT" />
      <xs:enumeration value="SUCCESS" />
      <xs:enumeration value="FAILURE" />
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="SelectVirtualSubAndAssignMSISDNRequest">
    <xs:annotation>
      <xs:documentation>
            Assign MSIDN for target sim
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="globalSimTransferId" type="xs:long" />
            <xs:element name="remoteRequestId" type="xs:long" />
            <xs:element name="targetAccount" type="xs:string" />
            <xs:element name="targetOperator" type="xs:string" />
            <xs:element minOccurs="0" maxOccurs="1" name="primaryAccount" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Name of the primary account in which the primary SIM exists
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="primaryOperator" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Name of the primary operator in which the primary SIM exists
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceIccid" type="xs:string" />
            <xs:element name="sourceImsi" type="xs:string" />
            <xs:element name="sourceMsisdn" type="xs:string" />
            <xs:element name="targetSimProfileId" type="xs:string" />
            <xs:element name="globalSimTransferType" type="GlobalSimTransferType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SelectVirtualSubAndAssignMSISDNResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="SelectVirtualSubAndAssignMSISDNStatus" />
            <xs:element minOccurs="0" maxOccurs="1" name="msisdnAssignStatus" type="msisdnAssignmentStatus" />
            <xs:element minOccurs="0" maxOccurs="1" name="transactionId" type="xs:string" />
            <xs:element minOccurs="0" maxOccurs="1" name="targetSimSubscriptionInfo" type="GlobalSimSubscriptionInfoType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="WorkflowAsyncActionResponseCallbackRequest">
    <xs:annotation>
      <xs:documentation>
            Callback API to post response to an asynchronous WorkflowAction corresponding to the given transactionId
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="1" name="transactionId" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Unique ID so that asynchronous responses can be tracked by Jasper
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="response" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="WorkflowAsyncActionResponseCallbackResponse">
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>
            Empty response
        </xs:documentation>
      </xs:annotation>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="DeactivateAuthTokenRequest">
    <xs:annotation>
      <xs:documentation>
                Gets the authentication token for the given local and remote user identifiers.
                This token is encrypted using the requesting server's public key and needs to
                be decrypted by the requesting server using its private key.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="localUser" type="UserIdentifierType">
              <xs:annotation>
                <xs:documentation>
                                    Information about the user on this Control Center instance.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="remoteUser" type="UserIdentifierType">
              <xs:annotation>
                <xs:documentation>
                                    Information about the user on another Control Center instance.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="authToken" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="DeactivateAuthTokenResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:boolean" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="DeactivateRemoteAuthTokenRequest">
    <xs:annotation>
      <xs:documentation>
                Deactivates the authentication token for the given local and remote user identifiers.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="localUser" type="UserIdentifierType">
              <xs:annotation>
                <xs:documentation>
                                    Information about the user on this Control Center instance.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="remoteUser" type="UserIdentifierType">
              <xs:annotation>
                <xs:documentation>
                                    Information about the user on another Control Center instance.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="authToken" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="DeactivateRemoteAuthTokenResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:boolean" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetUserSessionRequest">
    <xs:annotation>
      <xs:documentation>
                TODO
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="localUser" type="UserIdentifierType" />
            <xs:element name="remoteUser" type="UserIdentifierType" />
            <xs:element name="ipAddress" type="xs:string" />
            <xs:element name="authToken" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetUserSessionResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="sessionUrl" type="xs:anyURI" />
            <xs:element name="success" type="xs:boolean" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="EndUserSessionRequest">
    <xs:annotation>
      <xs:documentation>
                Session id should be obtained from GetUserSession API.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="localUser" type="UserIdentifierType" />
            <xs:element name="remoteUser" type="UserIdentifierType" />
            <xs:element name="ipAddress" type="xs:string" />
            <xs:element name="authToken" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="EndUserSessionResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:boolean" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="IsNewUsernameValidRequest">
    <xs:annotation>
      <xs:documentation>
                Says whether the given string can be used to as a new user's username (aka. login) in this Control Center instance.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="username" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Proposed username (aka login) for a new user.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="IsNewUsernameValidResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="valid" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>
                                    True, if the new username is valid;
                                    false, otherwise.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="IsPasswordValidRequest">
    <xs:annotation>
      <xs:documentation>
                Says whether the given string can be used as a password.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="0" name="username" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Username (aka login) for the user.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="password" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Proposed password for the user.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="serviceProvider" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Service provider for the user.
                                    Password policies can be service provider-specific.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="account" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    account for the user.
                                    Password policies can be account-specific.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="IsPasswordValidResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="valid" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>
                                    True, if the password is valid;
                                    false, otherwise.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="reason" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Optional reason if password is not valid.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="DeleteUserRequest">
    <xs:annotation>
      <xs:documentation>
                Delete a user for a given user id.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="userLogin" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    User Login
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="DeleteUserResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:boolean" />
            <xs:element minOccurs="0" name="errorMessage" type="ResponseStatusType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ResetUserPasswordRequest">
    <xs:annotation>
      <xs:documentation>
                Reset a user's password for a given user id.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="userId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                    User Id
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ResetUserPasswordResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="0" name="errorMessage" type="ResponseStatusType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SimRmaExchangeRequest">
    <xs:annotation>
      <xs:documentation>
                Request to exchange an activated SIM with another SIM. 
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="exchangeSimIccid" type="xs:string" />
            <xs:element minOccurs="0" name="externalRmaId" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Optional customer RMA Id.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SimRmaExchangeResponse">
    <xs:annotation>
      <xs:documentation>
                Response for SimRmaExchange API call.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="rmaId" type="xs:string">
              <xs:annotation>
                <xs:documentation>Jasper RMA Id.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CreateUserRequest">
    <xs:annotation>
      <xs:documentation>
                Creates a user with the given information.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="username" type="xs:string" />
            <xs:element minOccurs="0" name="password" type="xs:string" />
            <xs:element name="operatorName" type="xs:string" />
            <xs:element name="accountName" type="xs:string" />
            <xs:element minOccurs="0" name="customerName" type="xs:string" />
            <xs:element name="contact" type="ContactType" />
            <xs:element name="timezone" type="xs:string" />
            <xs:element name="language" type="xs:string" />
            <xs:element name="role" type="xs:string" />
            <xs:element minOccurs="0" name="accountAuthToken" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Needed to create a user for the Single Sign-on account peering use case.
                                    Do not include for standard users.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="peeredUser" type="UserIdentifierType">
              <xs:annotation>
                <xs:documentation>
                                    Needed to create a user for the Single Sign-on account peering use case.
                                    This user account is created as a "peer" for a user account on a remote
                                    Control Center instance.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CreateUserResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:boolean" />
            <xs:element minOccurs="0" name="errorMessage" type="ResponseStatusType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CreateTrialUserAccountRequest">
    <xs:annotation>
      <xs:documentation>
                Creates a trial user and an account with the given information.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="username" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Login name of the trial user to be created.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="password" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Password of the trial user to be created.
                                    Because this is a clear-text password,
                                    this API must be called over HTTPS to be secure.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="operator" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Name of the Jasper-powered operator
                                    that will house this trial user.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="contact" type="ContactType">
              <xs:annotation>
                <xs:documentation>
                                    Contact information about the trial user.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="billingAddress" type="AddressType">
              <xs:annotation>
                <xs:documentation>
                                    Billing address for the trial user.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="shippingAddress" type="AddressType">
              <xs:annotation>
                <xs:documentation>
                                    Shipping address for the trial user.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="salesLeadData" type="SalesLeadType">
              <xs:annotation>
                <xs:documentation>
                                    Sales lead information.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="devKitType" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Valid values for the development kit type are as follows:
                                    ATT_BENCHMARK, ATT_ERICSSON, ROGERS, KPN_BENCHMARK, TELCEL_BENCHMARK.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="timezone" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Timezone code, e.g. UTC, PST, GMT-08:00, etc.
                                    See http://java.sun.com/javase/6/docs/api/java/util/TimeZone.html for details.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="language" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    ISO language code, e.g. "en" for English.
                                    See http://www.loc.gov/standards/iso639-2/php/code_list.php for details.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="roleName" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                   We only support TRIALUSER and MBBACCOUNTADMIN Role right now
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="taxId" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Tax ID field for  Billing Account Number (BAN), which is used for provisioning the SIMs for the account.
                                     Example : 631464690
                                 </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="accountSegment" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    accountSegment -  use to identify the account as trial
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CreateTrialUserAccountResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>
                                    True, if a trial user was created;
                                    false, otherwise.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="accountId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                    Internal id of the account created for this request.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="accountName" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Name of the account created for this request.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="apiKey" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    The API key is used to authenticate API user along with username.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAccountPeerStatusRequest">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="operator" type="xs:string" />
            <xs:element name="account" type="xs:string" />
            <xs:element name="remoteOperator" type="xs:string" />
            <xs:element name="remoteAccount" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetAccountPeerStatusResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:long" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SetAccountPeerStatusRequest">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="operator" type="xs:string" />
            <xs:element name="account" type="xs:string" />
            <xs:element name="remoteOperator" type="xs:string" />
            <xs:element name="remoteAccount" type="xs:string" />
            <xs:element name="status" type="xs:long" />
            <xs:element name="secretKey" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SetAccountPeerStatusResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="success" type="xs:boolean" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetLinePayStatusByOpAcctIdRequest">
    <xs:annotation>
      <xs:documentation>
                Returns the Line Payment Status for a given operator account ID.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="operatorAccountId" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Operator Account ID of the account
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetLinePayStatusByOpAcctIdResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="linePaymentStatus" type="xs:string" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="EditLinePayStatusRequest">
    <xs:annotation>
      <xs:documentation>
                Edit the line payment status on a device.

                If the request failed, a SOAP fault will be returned. Detailed reason about the failure
                will be in the detail section of the fault.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="linePaymentStatus" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    The new Line Payment Status:
                                    "CURRENT": Current
                                    "SUSPENDED": Suspended
                                    "CANCELLED": Cancelled
                                    "FINAL_CANCELLATION": Final Cancellation
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="EditLinePayStatusResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="EditLinePayStatusPerAcctRequest">
    <xs:annotation>
      <xs:documentation>
                Edit the line payment status per operator account.

                If the request failed, a SOAP fault will be returned. Detailed reason about the failure
                will be in the detail section of the fault.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="operatorAccountId" type="xs:string" />
            <xs:element name="linePaymentStatus" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    The new Line Payment Status:
                                    "CURRENT": Current
                                    "SUSPENDED": Suspended
                                    "CANCELLED": Cancelled
                                    "FINAL_CANCELLATION": Final Cancellation
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="EditLinePayStatusPerAcctResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="operatorAccountId" type="xs:string" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="TransferTerminalAccountNoSimStatusRequest">
    <xs:annotation>
      <xs:documentation>
                Transfers a device (terminal) to a different account.

                If the request failed, a SOAP fault will be returned. Detailed reason about the failure
                will be in the detail section of the fault.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Identifies the device to be transferred
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="msisdn" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    The MSISDN to assign to the device
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="accountid" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                    The destination account for the device
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="ratePlan" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    New rate plan for the device; defaults to the account's default rate plan
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="communicationPlan" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    New communication plan for the device; defaults to the account's default communication plan
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="dateShipped" type="xs:dateTime">
              <xs:annotation>
                <xs:documentation>
                                    Date when the device was shipped; defaults to the current date
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="TransferTerminalAccountNoSimStatusResponse">
    <xs:annotation>
      <xs:documentation>
                Response for TransferTerminalAccountNoSimStatus API call.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetSubscriberHistoryByMsisdnRequest">
    <xs:annotation>
      <xs:documentation>
            Get all historical MSISDN associations for given MSISDN.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="msisdn" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetSubscriberHistoryByMsisdnResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="subscriber">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="acctName" type="xs:string" />
                  <xs:element name="operatorAccountId" type="xs:string" />
                  <xs:element name="taxId" type="xs:string" />
                  <xs:element name="iccid" type="xs:string" />
                  <xs:element name="imsi" type="xs:string" />
                  <xs:element name="msisdn" type="xs:string" />
                  <xs:element name="startDate" type="xs:dateTime" />
                  <xs:element minOccurs="0" maxOccurs="1" name="endDate" type="xs:dateTime" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="PortOutMsisdnRequest">
    <xs:annotation>
      <xs:documentation>
            Port out specified MSISDN.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="msisdn" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="PortOutMsisdnResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="msisdn" type="xs:string" />
            <xs:element name="status" type="xs:string" />
            <xs:element name="description" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="MigrateSimRequest">
    <xs:annotation>
      <xs:documentation>
            Migrate a SIM from one account to another.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="newServiceProvider" type="xs:string" />
            <xs:element name="newAccountId" type="xs:long" />
            <xs:element minOccurs="0" name="ratePlanId" type="xs:long" />
            <xs:element minOccurs="0" name="communicationPlanId" type="xs:long" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="MigrateSimResponse">
    <xs:annotation>
      <xs:documentation />
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="requestId" type="xs:string" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetSimMigrationStatusRequest">
    <xs:annotation>
      <xs:documentation>
            Gets the status of the migration of a SIM between accounts.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="requestId" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetSimMigrationStatusResponse">
    <xs:annotation>
      <xs:documentation />
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:string" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CancelSimMigrationRequest">
    <xs:annotation>
      <xs:documentation>
            Cancels the migration of a SIM between accounts.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="requestId" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CancelSimMigrationResponse">
    <xs:annotation>
      <xs:documentation />
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:string" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="TransferGlobalSimRequest">
    <xs:annotation>
      <xs:documentation>
                Transfers a single Global SIM to target Operator. Call only schedules the transfer
                which in happens asynchronously.

                If the request failed, a SOAP fault will be returned. Detailed reason about the failure
                will be in the detail section of the fault. Error details are documented below:

                1800101=Global Sim not found
                1800102=Global Partner not found
                1800103=Invalid globalSimTransferId in the request
                1800104=Invalid transfer request. Primary ICCID hasn't been transferred to any partner
                1800105=ICCID already has a global transfer pending
                1800106=ICCID doesn't have any pending Global Transfer request
                1800107=Global Alliance not found
                1800108=Target operator doesn't exist
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="primaryIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Primary ICCID of the Global SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetPartnerName" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Target Partner name
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="globalAllianceName" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Name of the global alliance
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="globalSimTransferType" type="GlobalSimTransferType">
              <xs:annotation>
                <xs:documentation>
                                STANDARD represents forward transfer for a Global SIM. REVERT represents reverse transfer for a Global SIM.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="callbackNotificationURL" type="xs:anyURI">
              <xs:annotation>
                <xs:documentation>
                                An URL to start sending the PUSH notifications to.

                                This element is optional. If omitted, no PUSH notifications will be sent.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="TransferGlobalSimResponse">
    <xs:annotation>
      <xs:documentation />
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="globalSimTransferId" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                GlobalSimTransferId represents request Id of the transfer request
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="primaryIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Primary ICCID of the Global SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetSimSubscriptionInfo" type="GlobalSimSubscriptionInfoType">
              <xs:annotation>
                <xs:documentation>
                                Target SIM subscription details
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CancelGlobalSimTransferRequest">
    <xs:annotation>
      <xs:documentation>
            Cancels the Global SIM transfer between operators. The request is cancelled immediately.

            If the request failed, a SOAP fault will be returned. Detailed reason about the failure
            will be in the detail section of the fault. Error details are documented below:

            1800101=Global Sim not found
            1800102=Global Partner not found
            1800103=Invalid globalSimTransferId in the request
            1800104=Invalid transfer request. ICCID has no COMPLETE transfer associated with it
            1800105=ICCID already has a global transfer pending
            1800106=ICCID doesn't have any pending Global Transfer request
            1800107=Global Alliance not found
            1800108=Target operator doesn't exist
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="primaryIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Primary ICCID of the Global SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CancelGlobalSimTransferResponse">
    <xs:annotation>
      <xs:documentation />
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="primaryIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Primary ICCID of the Global SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="status" type="GlobalSimTransferStatusType">
              <xs:annotation>
                <xs:documentation>
                                Status of the Global Sim Transfer
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetGlobalSimTransferStatusRequest">
    <xs:annotation>
      <xs:documentation>
            Gets the status of the migration of a SIM between accounts.

            If the request failed, a SOAP fault will be returned. Detailed reason about the failure
            will be in the detail section of the fault. Error details are documented below:

            1800101=Global Sim not found
            1800102=Global Partner not found
            1800103=Invalid globalSimTransferId in the request
            1800104=Invalid transfer request. ICCID has no COMPLETE transfer associated with it
            1800105=ICCID already has a global transfer pending
            1800106=ICCID doesn't have any pending Global Transfer request
            1800107=Global Alliance not found
            1800108=Target operator doesn't exist
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="primaryIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Primary ICCID of the Global SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetGlobalSimTransferStatusResponse">
    <xs:annotation>
      <xs:documentation />
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="primaryIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Primary ICCID of the Global SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetPartnerName" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Target Partner name
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="globalAllianceName" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Name of the global alliance
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="globalSimTransferType" type="GlobalSimTransferType">
              <xs:annotation>
                <xs:documentation>
                                STANDARD represents forward transfer for a Global SIM. REVERT represents reverse transfer for a Global SIM.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="status" type="GlobalSimTransferStatusType">
              <xs:annotation>
                <xs:documentation>
                                Status of the Global Sim Transfer
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="statusDetails" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Details status of Global SIM transfer
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="errorCode" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                High-level Error Code. That defines the Validation errors, Business rule validation errors or processing Errors. E.g.: 1800109
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="errorDetails" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Details of the each error message possible input values. E.g. Account mapping not defined for Global SIM transfer
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="targetSimSubscriptionInfo" type="GlobalSimSubscriptionInfoType">
              <xs:annotation>
                <xs:documentation>
                                Target SIM subscription information
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GlobalTransferSimRequest">
    <xs:annotation>
      <xs:documentation>
            Transfers a single SIM to target Operator and Account that can exist on other POD.
            The call only schedules the transfer which gets executed asynchronously.

            If the request fails, a SOAP fault will be returned. Detailed reason about the failure
            will be in the detail section of the fault. Error details are documented below:

            TODO add / remove more error details as and when identified.

            4000001=The user making the API call doesn't have any accounts peered
            4000100=Could not communicate with any of the peered accounts
            1800101=Global Sim not found
            1800102=Global Partner not found
            1800103=Invalid globalSimTransferId in the request
            1800104=Invalid transfer request. Primary ICCID hasn't been transferred to any partner
            1800105=ICCID already has a global transfer pending
            1800106=ICCID doesn't have any pending Global Transfer request
            1800107=Global Alliance not found
            1800108=Target operator doesn't exist
            1800110=Account mapping not defined for Global SIM transfer
            1800111=Global SIM is in invalid state for Global SIM transfer
            1800137=Source Operator not found
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="primaryICCID" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Primary ICCID of the Global SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="primaryIMSI" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Primary IMSI of the Global SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="primaryMSISDN" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                The MSISDN associated with the primary ICCID of the Global SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="primaryOperatorName" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Primary Service Provider owning the Global SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="primaryAcctName" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Account owning the primary ICCID of the Global SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="primarySimProfileId" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                The External SIM Profile Id of the Primary ICCID of the Global SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="primarySimState" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                The State of the Primary ICCID of the Global SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="primaryGlobalSimType" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                The Global-SIM-Type of the Primary ICCID of the Global SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="targetOperatorName" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Target Partner Operator where the SIM needs to be re-IMSI-d.
                                Mandatory for forward transfer, optional for reverse transfer
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="targetAccountName" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Target Partner Account where the SIM needs to be re-IMSI-d
                                Mandatory for forward transfer, optional for reverse transfer
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="targetSimProfileId" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                The SM Profile ID under the Target Partner to find the Target SIM from
                                Mandatory for forward transfer, N/A for reverse transfer
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="transferType" type="GlobalSimTransferType">
              <xs:annotation>
                <xs:documentation>
                                STANDARD represents regular transfer. REVERT represents reverting REIMSI
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="callbackNotificationURL" type="xs:anyURI">
              <xs:annotation>
                <xs:documentation>
                                An URL to send the PUSH notifications to when the transfer completes / fails.
                                This element is optional. If omitted, no PUSH notifications will be sent.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="isSpecialTargetMSISDNAssignment" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>
                                A boolean parameter specifying whether special MSISDN assignment is required on the target operator, or not.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="otaAlgorithmType" type="GlobalSimOtaAlgoType">
              <xs:annotation>
                <xs:documentation>
                                A String value specifying the type of OTA algorithm.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="euiccID" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                A string identifying the eUICC ID of the sim card - translates to an unique ID of the physical sim.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GlobalTransferSimResponse">
    <xs:annotation>
      <xs:documentation />
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="transferId" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            GlobalSimTransferId represents request Id of the transfer request
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="primaryICCID" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Primary ICCID of the Global SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetGlobalTransferSimStatusRequest">
    <xs:annotation>
      <xs:documentation>
        Gets the status of a Global SIM transfer between accounts.

        If the request failes, a SOAP fault will be returned. Detailed reason about the failure
        will be in the detail section of the fault. Error details are documented below:

        1800101=Global Sim not found
        1800106=ICCID doesn't have any pending Global Transfer request
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="primaryIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Primary ICCID of the Global SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetGlobalTransferSimStatusResponse">
    <xs:annotation>
      <xs:documentation />
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="primaryIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Primary ICCID of the Global SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="transferType" type="GlobalSimTransferType">
              <xs:annotation>
                <xs:documentation>
                            STANDARD represents forward transfer for a Global SIM. REVERT represents reverse transfer for a Global SIM.
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="status" type="GlobalSimTransferStatusType">
              <xs:annotation>
                <xs:documentation>
                            Status of the Global Sim Transfer
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="statusDetails" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Detailed status of Global SIM transfer
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceOperatorName" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Source Operator name
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="sourceAccountName" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Source Account name
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetOperatorName" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Target Operator name
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="targetAccountName" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Target Account name
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceSimSubscriptionInfo" type="GlobalSimSourceSubscriptionInfoType">
              <xs:annotation>
                <xs:documentation>
                            Source SIM subscription information
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="errorCode" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            High-level Error Code. That defines the Validation errors, Business rule validation errors or processing Errors. E.g.: 1800109
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="errorDetails" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Details of the each error message possible input values. E.g. Account mapping not defined for Global SIM transfer
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="targetSimSubscriptionInfo" type="GlobalSimSubscriptionInfoType">
              <xs:annotation>
                <xs:documentation>
                            Target SIM subscription information
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CancelGlobalTransferSimRequest">
    <xs:annotation>
      <xs:documentation>
        Schedules rollback of the failed Global SIM transfer request between operators.
        The call only schedules the rollback which gets executed asynchronously.
        Precondition: The outstanding transfer on the given Primary ICCID should be in failed state.
        Post condition: After successfull rollback, the source SIM will be moved back into the traffic allowed state
        and the target SIMs will be moved back to the Purged state.

        If the request failed, a SOAP fault will be returned. Detailed reason about the failure
        will be in the detail section of the fault. Error details are documented below:

        1800106=ICCID doesn't have any pending Global Transfer request
        1800105=ICCID already has a global transfer pending
        1800167=Invalid cancel request. ICCID has no FAILED transfer associated with it
        1800116=Global SIM transfer can'be cancelled for the SIM at this stage
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="primaryIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Primary ICCID of the Global SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CancelGlobalTransferSimResponse">
    <xs:annotation>
      <xs:documentation />
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="primaryIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Primary ICCID of the Global SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="transferId" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            GlobalSimTransferId represents request Id of the transfer request
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="status" type="GlobalSimTransferStatusType">
              <xs:annotation>
                <xs:documentation>
                            Status of the Global Sim Transfer
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="GetOrCreateSimFromVirtualSubscriptionStatus">
    <xs:annotation>
      <xs:documentation>
            Satus:
            "COMPLETE": Target SIM successfully created
            "PENDING": Target SIM is in the process of being created
            "FAILED": Failed creating new target sim
        </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="PENDING" />
      <xs:enumeration value="COMPLETE" />
      <xs:enumeration value="FAILED" />
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="GetOrCreateSimFromVirtualSubscriptionRequest">
    <xs:annotation>
      <xs:documentation>
         Request object represeting the parameters required for creting a sim from virtual subscription pool for a given target account.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="globalSimTransferId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                ID of the global sim transfer process - Used for tracking/logging purposes
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetAccount" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                               Name of the target account in which the new target sim is created
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetOperator" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Name of the target operator in which the new target sim is created
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="primaryAccount" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Name of the primary account in which the primary SIM exists
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="primaryOperator" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Name of the primary operator in which the primary SIM exists
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                ICCIDD of the source SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceImsi" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                IMSI of the source SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceMsisdn" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                MSISDN of the source SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetSimProfileId" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                SimProfile of the target Sim
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="globalSimTransferType" type="GlobalSimTransferType">
              <xs:annotation>
                <xs:documentation>
                                STANDARD represents regular transfer. REVERT represents reverting REIMSI
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="pin1" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Src SIM PIN1
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="puk1" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Src SIM PUK1
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="pin2" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Src SIM PIN2
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="puk2" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Src SIM PUK2
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="adm1" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Src SIM ADM1
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="adm2" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Src SIM ADM2
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="adm3" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Src SIM ADM3
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="adm4" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Src SIM ADM4
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="acc" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Src SIM ACC
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetOrCreateSimFromVirtualSubscriptionResponse">
    <xs:annotation>
      <xs:documentation>
    Response indicating success/failure and the details of subscription mapping
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="globalSimTransferId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                            GlobalSimTransferId represents request Id of the transfer request
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Primary ICCID of the Global SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="status" type="GetOrCreateSimFromVirtualSubscriptionStatus">
              <xs:annotation>
                <xs:documentation>
                           Status of the target sim creation
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="targetSimSubscriptionInfo" type="GlobalSimSubscriptionInfoType">
              <xs:annotation>
                <xs:documentation>
                            Target SIM subscription details
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="targetSimRatePlan" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Target SIM rate plan
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="targetSimCommPlan" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Target SIM comm plan
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="PurgeTargetSimRequest">
    <xs:annotation>
      <xs:documentation>
         Request object for purging the target sim API
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="globalSimTransferId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                ID of the global sim transfer process - Used for tracking/logging purposes
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                ICCIDD of the target SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="PurgeTargetSimResponse">
    <xs:annotation>
      <xs:documentation>
         Response object for purging the target sim API
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="globalSimTransferId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                ID of the global sim transfer process - Used for tracking/logging purposes
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                ICCID of the target SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="simState" type="SimStateType">
              <xs:annotation>
                <xs:documentation>
                                State of the target SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ActivateTargetSimRequest">
    <xs:annotation>
      <xs:documentation>
            Request object for activating the target sim API
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="globalSimTransferId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                ID of the global sim transfer process - Used for tracking/logging purposes
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                ICCID of the target SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetSimState" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Desired state of the taret sim on activation
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="otaAlgorithmType" type="GlobalSimOtaAlgoType">
              <xs:annotation>
                <xs:documentation>
                                A String value specifying the type of OTA algorithm.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ActivateTargetSimResponse">
    <xs:annotation>
      <xs:documentation>
        Response object for activating the target sim API
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="globalSimTransferId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                            ID of the global sim transfer process - Used for tracking/logging purposes
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            ICCID of the target SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetSimState" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            state of the target sim on activation
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="PrepareSrcSimRequest">
    <xs:annotation>
      <xs:documentation>
            Request object for preparing the src sim API
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="globalSimTransferId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                ID of the global sim transfer process - Used for tracking/logging purposes
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                ICCID of the src SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="PrepareSrcSimResponse">
    <xs:annotation>
      <xs:documentation>
        Response object for preparing the src sim API
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="globalSimTransferId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                            ID of the global sim transfer process - Used for tracking/logging purposes
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            ICCID of the src SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="previousSourceSimState" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            state of the src sim
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceSimState" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            state of the src sim
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="sourceSimRatePlan" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Src SIM rate plan
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="sourceSimCommPlan" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Src SIM comm plan
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="pin1" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Src SIM PIN1
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="puk1" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Src SIM PUK1
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="pin2" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Src SIM PIN2
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="puk2" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Src SIM PUK2
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="adm1" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Src SIM ADM1
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="adm2" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Src SIM ADM2
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="adm3" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Src SIM ADM3
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="adm4" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Src SIM ADM4
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="acc" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Src SIM ACC
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="UndoPrepareSrcSimRequest">
    <xs:annotation>
      <xs:documentation>
            Request object for undoing the preparation that was done of the source Global-SIM for the Re-IMSI transfer. Used in the local API defined for cross-POD Global SIM transfer feature.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="simTransferWorkflowId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                ID of the SIM transfer workflow instance - Used for tracking/logging purposes
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                ICCID of the src SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceSimState" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Desired state of the source sim on undo
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="UndoPrepareSrcSimResponse">
    <xs:annotation>
      <xs:documentation>
        Response object for preparing the src sim API
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="simTransferWorkflowId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                            ID of the SIM transfer workflow instance - Used for tracking/logging purposes
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            ICCID of the src SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceSimState" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            state of the src sim
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="DeactivateSrcSimRequest">
    <xs:annotation>
      <xs:documentation>
            Request object for de-activating the src sim API
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="globalSimTransferId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                ID of the global sim transfer process - Used for tracking/logging purposes
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                ICCID of the src SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="DeactivateSrcSimResponse">
    <xs:annotation>
      <xs:documentation>
        Response object for deactivating the src sim API
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="globalSimTransferId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                            ID of the global sim transfer process - Used for tracking/logging purposes
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            ICCID of the src SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceSimState" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            state of the src sim on activation
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="AssociateSrcSimWithTargetSimRequest">
    <xs:annotation>
      <xs:documentation>
            Request object to save the subscription mapping on the src POD
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="globalSimTransferId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                ID of the global sim transfer process - Used for tracking/logging purposes
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                ICCID of the source SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                ICCID of the source SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetMsisdn" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                MSISDN of the source SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetImsi" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                MSISDN of the source SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetAccount" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Name of the target account in which the new target sim is created
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetOperator" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Name of the target operator in which the new target sim is created
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="globalSimTransferType" type="GlobalSimTransferType">
              <xs:annotation>
                <xs:documentation>
                                STANDARD represents regular transfer. REVERT represents reverting REIMSI
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="AssociateSrcSimWithTargetSimResponse">
    <xs:annotation>
      <xs:documentation>
        Response object on save the subscription mapping on the src POD
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="globalSimTransferId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                            GlobalSimTransferId represents request Id of the transfer request
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="subcriptionMappingId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                           subscription mapping id
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetGlobalSimSubscriptionMappingRequest">
    <xs:annotation>
      <xs:documentation>
        Request object represeting the parameters required to get the currently active subscription mapping
        from the remote primary SIM to the Virtual Subscription belonging to the given target account.
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="primaryIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            ICCID of the primary SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="primaryImsi" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            IMSI of the primary SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="primaryMsisdn" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            MSISDN of the primary SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetOperator" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Name of the target operator of the target account
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetAccount" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Name of the target account whose subscription is mapped
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetGlobalSimSubscriptionMappingResponse">
    <xs:annotation>
      <xs:documentation>
        Response object represeting the currently active subscription mapping
        from the remote primary SIM to the Virtual Subscription belonging to the given target account.
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="targetIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            ICCID of the target SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetImsi" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            IMSI of the target SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetMsisdn" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            MSISDN of the target SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="PrepareTargetSimRequest">
    <xs:annotation>
      <xs:documentation>
            Request object for preparing the target sim API
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="simTransferWorkflowId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                ID of the SIM transfer workflow instance - Used for tracking/logging purposes
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                ICCID of the target SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="PrepareTargetSimResponse">
    <xs:annotation>
      <xs:documentation>
        Response object for preparing the target sim API
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="simTransferWorkflowId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                            ID of the SIM transfer workflow instance - Used for tracking/logging purposes
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            ICCID of the target SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetSimState" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            state of the target sim
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="targetSimRatePlan" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Target SIM rate plan
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="targetSimCommPlan" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Target SIM comm plan
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="UndoPrepareTargetSimForReverseTransferRequest">
    <xs:annotation>
      <xs:documentation>
            Request object for API to undo the preparation done for the target sim for reverse transfer
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="simTransferWorkflowId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                ID of the SIM transfer workflow instance - Used for tracking/logging purposes
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                ICCID of the target SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="UndoPrepareTargetSimForReverseTransferResponse">
    <xs:annotation>
      <xs:documentation>
        Response object from API to undo the preparation done for the target sim for reverse transfer
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="simTransferWorkflowId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                            ID of the SIM transfer workflow instance - Used for tracking/logging purposes
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            ICCID of the target SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetSimState" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            state of the target sim
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="SimStatus">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="1" name="SIM_Status" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="ICCID" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="Error_Code" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ActivateSimResult">
    <xs:sequence>
      <xs:element minOccurs="1" maxOccurs="1" name="Status_Code" nillable="true" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="MSISDN" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="Batch_Identifier" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:element name="ActivateSimPPURequest">
    <xs:annotation>
      <xs:documentation>
            Transfer the SIM from operator inventory to enterprise account and then activate it
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="1" name="strSIM" type="xs:string" />
            <xs:element minOccurs="1" maxOccurs="1" name="strAction" type="xs:string" />
            <xs:element minOccurs="1" maxOccurs="1" name="strDate" type="xs:string" />
            <xs:element minOccurs="1" maxOccurs="1" name="strCustPrefix" type="xs:string" />
            <xs:element minOccurs="0" maxOccurs="1" name="strCust_Field1" type="xs:string" />
            <xs:element minOccurs="0" maxOccurs="1" name="strCust_Field2" type="xs:string" />
            <xs:element minOccurs="0" maxOccurs="1" name="strCust_Field3" type="xs:string" />
            <xs:element minOccurs="0" maxOccurs="1" name="strCust_Field4" type="xs:string" />
            <xs:element minOccurs="0" maxOccurs="1" name="strCust_Field5" type="xs:string" />
            <xs:element minOccurs="0" maxOccurs="1" name="strProfileName" type="xs:string" />
            <xs:element minOccurs="1" maxOccurs="1" name="iPriority" type="xs:int" />
            <xs:element minOccurs="0" maxOccurs="1" name="strPPU" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ActivateSimPPUResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="1" name="Activate_SIM_PPUResult" type="ActivateSimResult" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="DeactivateSimRequest">
    <xs:annotation>
      <xs:documentation>
            Deactivate the SIM
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="1" name="strSIM" type="xs:string" />
            <xs:element minOccurs="1" maxOccurs="1" name="strCustPrefix" type="xs:string" />
            <xs:element minOccurs="1" maxOccurs="1" name="strDeactivationDate" nillable="true" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="DeactivateSimResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="1" name="Status_Code" nillable="true" type="xs:string" />
            <xs:element minOccurs="0" maxOccurs="1" name="Batch_Identifier" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetSimStatusRequest">
    <xs:annotation>
      <xs:documentation>
            Get SIM Status
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="1" name="strSIM" type="xs:string" />
            <xs:element minOccurs="1" maxOccurs="1" name="strCustPrefix" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetSimStatusResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="1" name="Get_SIM_StatusResult" type="SimStatus" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="DeviceType">
    <xs:annotation>
      <xs:documentation>
            The detailed RawSim information.
        </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Type" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                    Type of SIM card/device
                    "INFOTAINMENT" : in-vehicle infotainment device
                    "TELEMATICS": in-vehicle telematics device
                    "OTHER": Ignored
                </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="Identification">
        <xs:annotation>
          <xs:documentation>
                    IMSI: up to 15 digits, ICCID up to 22 digits
                </xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:string">
              <xs:attribute name="type" type="xs:string" />
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="IMSI" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="IMEI" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                    This field may have the device IMEI or IMEISV depending on various factors such as your operator's installation as well as the device itself.
                </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="ICCID" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="MSISDN" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DevicesType">
    <xs:annotation>
      <xs:documentation>
        Aggregator for device. At least one element must be present
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="Device" type="DeviceType" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MBBVehicleRegistrationRequestType">
    <xs:sequence>
      <xs:element name="VIN" type="xs:string" />
      <xs:element name="Brand" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Brand of the impacted vehicle
                Audi | VW | Skoda | Porsche | Seat | Lamborghini | Bentley
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Country" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Target market of the impacted vehicle in ISO 3166-1 alpha-2 format
                AD | AE | AL | AN | AO | AR | AT | AU | BA | BB | BE | BG | BN | BO | BR | BY | CA | CH | CI | CL |
                CN | CO | CY | CZ | DE | DK | DO | DZ | EC | EE | EG | ES | ET | EU | FI | FR | GA | GB | GH | GI |
                GL | GM | GN | GP | GR | GT | HR | HU | ID | IE | IL | IN | IS | IT | JO | JP | KP | KR | KZ | LB |
                LI | LT | LU | LV | MA | MC | MD | MG | MK | MN | MQ | MT | NG | NL | NO | NP | PA | PE | PH | PL |
                PR | PT | PY | RO | RS | RU | SE | SI | SK | SM | SN | SV | SY | TN | TR | TT | UA | US | UY | VA |
                VE | VS | YE | YU | ZA.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Devices" type="DevicesType" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ResultType">
    <xs:annotation>
      <xs:documentation>
        The detailed RawSim information.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="1" name="MajorStatusCode" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Major status code information
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="MinorStatusCode" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Minur status code information
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="StatusCode" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Deprecated: MajorStatusCode/MinorStatusCode should be used
                The response includes the following HTTP status codes:
                200: Request was fulfilled successfully.
                400: Request sent by the client system cannot be interpreted.
                500: Problem on the server side occurred.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="StatusMessage" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                A text with some status code details
                e.g. Vehicle already registered
            </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OperationalResultType">
    <xs:annotation>
      <xs:documentation>
        Aggregator for device. At least one element must be present
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Result" type="ResultType" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MBBVehicleDeregistrationRequestType">
    <xs:annotation>
      <xs:documentation>
        Aggregator for device. At least one element must be present
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="VIN" type="xs:string" />
      <xs:element name="Brand" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Brand of the impacted vehicle
                Audi | VW | Skoda | Porsche | Seat | Lamborghini | Bentley
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Country" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Target market of the impacted vehicle in ISO 3166-1 alpha-2 format
                AD | AE | AL | AN | AO | AR | AT | AU | BA | BB | BE | BG | BN | BO | BR | BY | CA | CH | CI | CL |
                CN | CO | CY | CZ | DE | DK | DO | DZ | EC | EE | EG | ES | ET | EU | FI | FR | GA | GB | GH | GI |
                GL | GM | GN | GP | GR | GT | HR | HU | ID | IE | IL | IN | IS | IT | JO | JP | KP | KR | KZ | LB |
                LI | LT | LU | LV | MA | MC | MD | MG | MK | MN | MQ | MT | NG | NL | NO | NP | PA | PE | PH | PL |
                PR | PT | PY | RO | RS | RU | SE | SI | SK | SM | SN | SV | SY | TN | TR | TT | UA | US | UY | VA |
                VE | VS | YE | YU | ZA.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="Devices" type="DevicesType" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MBBVehicleInfoRequestType">
    <xs:annotation>
      <xs:documentation>
        Aggregator for device. At least one element must be present
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="VIN" type="xs:string" />
      <xs:element name="Brand" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Brand of the impacted vehicle
                Audi | VW | Skoda | Porsche | Seat | Lamborghini | Bentley
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Country" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Target market of the impacted vehicle in ISO 3166-1 alpha-2 format
                AD | AE | AL | AN | AO | AR | AT | AU | BA | BB | BE | BG | BN | BO | BR | BY | CA | CH | CI | CL |
                CN | CO | CY | CZ | DE | DK | DO | DZ | EC | EE | EG | ES | ET | EU | FI | FR | GA | GB | GH | GI |
                GL | GM | GN | GP | GR | GT | HR | HU | ID | IE | IL | IN | IS | IT | JO | JP | KP | KR | KZ | LB |
                LI | LT | LU | LV | MA | MC | MD | MG | MK | MN | MQ | MT | NG | NL | NO | NP | PA | PE | PH | PL |
                PR | PT | PY | RO | RS | RU | SE | SI | SK | SM | SN | SV | SY | TN | TR | TT | UA | US | UY | VA |
                VE | VS | YE | YU | ZA.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="DeviceType" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Device populated with type INFOTAINMENT, or TELEMATICS.
                May be omitted to get information returned for all eSIMs.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MBBVehicleInfoResponseType">
    <xs:annotation>
      <xs:documentation>
        Aggregator for device. At least one element must be present
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Result" type="ResultType" />
      <xs:element name="VIN" type="xs:string" />
      <xs:element name="Devices" type="DevicesType" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MBBMessageToVehicleRequestType">
    <xs:annotation>
      <xs:documentation>
        Aggregator for device. At least one element must be present
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="VIN" type="xs:string" />
      <xs:element name="DeviceType" type="xs:string" />
      <xs:element name="MessageType" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                One of :
                WAKEUP | TEXT | BINARY

                Type of the message.
                Type of the message to be sent.
                WAKEUP and TEXT are regular text messages (WAKEUP does not need to have a message text).
                The Message must contain a string in UTF-8 encoding.
                BINARY is a base64 encoded binary message.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="Message" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Depending on MessageType:
                WAKEUP and TEXT - up to 160 character string in UTF-8 encoding format.
                The field can be omitted for the WAKEUP message.

                BINARY - Base64 encoded stream of up to 140 bytes (before encoding).
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="ValidityPeriod" type="xs:positiveInteger" />
    </xs:sequence>
  </xs:complexType>
  <xs:element name="MBBMessageToVehicleRequest">
    <xs:annotation>
      <xs:documentation>
            API Call to pair a VIN and embedded SIMs including a device type, IMSI and IMEI as part of the provisioning
            process
            after vehicles are produced and documented in CarPort. This pairing should result in storing the VIN and device
            information (type, IMEI and IMSI) in the backend of the MNO to be available for further steps.
            Can be used to register one or more devices with embedded SIMs per vehicle.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="MessageToVehicle" type="MBBMessageToVehicleRequestType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="MBBMessageToVehicleResponse">
    <xs:annotation>
      <xs:documentation>
        The
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="OperationResult" type="OperationalResultType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="MBBVehicleDeregistrationRequest">
    <xs:annotation>
      <xs:documentation>
            API Call to pair a VIN and embedded SIMs including a device type, IMSI and IMEI as part of the provisioning
            process
            after vehicles are produced and documented in CarPort. This pairing should result in storing the VIN and device
            information (type, IMEI and IMSI) in the backend of the MNO to be available for further steps.
            Can be used to register one or more devices with embedded SIMs per vehicle.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="VehicleDeregistration" type="MBBVehicleDeregistrationRequestType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="MBBVehicleDeregistrationResponse">
    <xs:annotation>
      <xs:documentation>
        The
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="OperationResult" type="OperationalResultType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="MBBVehicleInfoRequest">
    <xs:annotation>
      <xs:documentation>
            API Call to pair a VIN and embedded SIMs including a device type, IMSI and IMEI as part of the provisioning
            process
            after vehicles are produced and documented in CarPort. This pairing should result in storing the VIN and device
            information (type, IMEI and IMSI) in the backend of the MNO to be available for further steps.
            Can be used to register one or more devices with embedded SIMs per vehicle.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="VehicleInfo" type="MBBVehicleInfoRequestType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="MBBVehicleInfoResponse">
    <xs:annotation>
      <xs:documentation>
        The
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="VehicleInfo" type="MBBVehicleInfoResponseType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="MBBVehicleRegistrationRequest">
    <xs:annotation>
      <xs:documentation>
            API Call to pair a VIN and embedded SIMs including a device type, IMSI and IMEI as part of the provisioning
            process
            after vehicles are produced and documented in CarPort. This pairing should result in storing the VIN and device
            information (type, IMEI and IMSI) in the backend of the MNO to be available for further steps.
            Can be used to register one or more devices with embedded SIMs per vehicle.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="VehicleRegistration" type="MBBVehicleRegistrationRequestType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="MBBVehicleRegistrationResponse">
    <xs:annotation>
      <xs:documentation>
        The
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="OperationResult" type="OperationalResultType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="SubscriberRequestType" abstract="true">
    <xs:annotation>
      <xs:documentation>
            This is base type for all subscriber request payload types. The idea is to capture attributes common to all subscriber requests
            (Such as priority, etc.).

            Subscriber Request type is derived from the Request Type.
            All concrete request types are derived from this abstract subscriber request type. This is the only place where polymorphism is encouraged.
        </xs:documentation>
    </xs:annotation>
    <xs:complexContent mixed="false">
      <xs:extension base="RequestType">
        <xs:sequence>
          <xs:element name="priority" type="xs:integer">
            <xs:annotation>
              <xs:documentation>
                            Message Priority - Lower priority message will be given higher preference. Possible Values are 1 to 10.
                        </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="effectiveDate" type="xs:dateTime">
            <xs:annotation>
              <xs:documentation>
                            The scheduled date (CCYY-MM-DDTHH:MM:SS) for the change to be applied in UTC.
                            Default to current date, which indicates that change will be effective immediately.
                        </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="SubscriberResponseStatusType">
    <xs:annotation>
      <xs:documentation>
        Subscriber Response Status type will hold the result of the request. For Immediate response, it will have SUCCESS or FAILURE values. For processed requests, it will have
        FAILURE or SUCCESS Messages.
    </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="FAILURE" />
      <xs:enumeration value="SUCCESS" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="SubscriberResponseEnhancedMessagesType">
    <xs:annotation>
      <xs:documentation>
        When the given request is Failed, list out error details from Network Service or Mail Services or Policy Service or Voicemail service .
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" maxOccurs="unbounded" name="enhancedResponseMessage" type="SubscriberResponseEnhancedMessageType" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SubscriberResponseMessageType">
    <xs:annotation>
      <xs:documentation>
        When the given request is "FAILURE" then it will carry the error details
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="errorCode" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                High-level Error Code. That defines the Validation errors, Business rule validation errors or processing Errors.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="errorSubCode" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Error Sub code is sub-category of the errors.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="errorName" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Error name is valued with Failure or success message name. Example: DUPLICATE_MESSAGE, BUSINESS_RULE_VALIDATION etc.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="errorMessage" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Details of the each error message possible input values.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SubscriberResponseEnhancedMessageType">
    <xs:annotation>
      <xs:documentation>
        When the given request is "FAILURE" then it will carry the error details
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="errorCategory" type="EnhancedErrorCategoryType">
        <xs:annotation>
          <xs:documentation>
                Error category to identify the Error Types like
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="errorCode" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                High-level Error Code. That defines the Validation errors, Business rule validation errors or processing Errors.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="errorName" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Error name is valued with Failure or success message name. Example: DUPLICATE_MESSAGE, BUSINESS_RULE_VALIDATION etc.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="errorDetails" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                Details of the each error message possible input values.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="EnhancedErrorCategoryType">
    <xs:annotation>
      <xs:documentation>
        Error Categories
        1. NETWORK_SERVICES
        2. MESSAGING_SERVICES
        3. POLICY_SERVICES
        4. VOICEMAIL_SERVICES
        5. SIM_LOCKED
        6. PROVISIONING_TIMEOUT
        7. DELAYED
        8. EXCEPTION_CONTACT_NETWORK_SUPPORT
    </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="NETWORK_SERVICES" />
      <xs:enumeration value="MESSAGING_SERVICES" />
      <xs:enumeration value="POLICY_SERVICES " />
      <xs:enumeration value="VOICEMAIL_SERVICES" />
      <xs:enumeration value="SIM_LOCKED" />
      <xs:enumeration value="PROVISIONING_TIMEOUT" />
      <xs:enumeration value="DELAYED" />
      <xs:enumeration value="EXCEPTION_CONTACT_NETWORK_SUPPORT" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="SubscriberResponseType" abstract="true">
    <xs:annotation>
      <xs:documentation>
        Subscriber Response Status type will hold the result of the request. For all responses, it will have SUCCESS or FAILURE values.
    </xs:documentation>
    </xs:annotation>
    <xs:complexContent mixed="false">
      <xs:extension base="ResponseType">
        <xs:sequence>
          <xs:element name="responseStatus" type="SubscriberResponseStatusType" />
          <xs:element minOccurs="0" name="responseMessage" type="SubscriberResponseMessageType" />
          <xs:element minOccurs="0" name="enhancedResponseMessages" type="SubscriberResponseEnhancedMessagesType" />
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="VoiceServiceType">
    <xs:annotation>
      <xs:documentation>
        Voice Service details block is used then request should contain Voice Quota and Voice Quota Unit
        1. Voice Quota is a Integer value. It is valued with -1 when it is unlimited voice calls.
        2. Voice Quota Unit is define the Voice Quota in units like "MINUTES" or "SECONDS".  If Voice is Unlimited, then should be valued to "SECONDS".
        3. Voice QOS about Quality of Service.
        4. Voice Features are Key and Value pairs. Like 3WC/CFW/Call Forward etc.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="voiceQuota" type="xs:integer" />
      <xs:element name="voiceQuotaUnit" type="VoiceQuotaUnitType" />
      <xs:element minOccurs="0" name="voiceQOS" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="unbounded" name="voiceFeatures" type="VoiceFeatureType" />
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="VoiceQuotaUnitType">
    <xs:annotation>
      <xs:documentation>
        Voice Quota unit as "MINUTES" or "SECONDS".
    </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="MINUTES" />
      <xs:enumeration value="SECONDS" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DataQuotaUnitType">
    <xs:annotation>
      <xs:documentation>
        Data Quota unit as "BYTES" or "Kilo Bytes or "Mega Bytes or Giga Bytes"
    </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="BYTES" />
      <xs:enumeration value="KB" />
      <xs:enumeration value="MB" />
      <xs:enumeration value="GB" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="VoiceMailServiceType">
    <xs:annotation>
      <xs:documentation>
        Voice Mail Services, will have voice mail features.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="unbounded" name="voiceMailFeatures" type="VoiceMailFeatureType" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="VoiceMailFeatureType">
    <xs:annotation>
      <xs:documentation>
        Voice Mail Features are Key/Value pairs.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="voiceMailFeature" type="FeatureType" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="VoiceFeatureType">
    <xs:annotation>
      <xs:documentation>
        Voice Features are Key/ Value pairs.
        Examples:
        Key - Value
        ===========
        MULTIPARTYCALLING(Three way calling - 3WC) - True/False
        CALLWAITING  - True/False
        CALLFORWARD -  Phone Number
        CALLHOLD - True/False
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="voiceFeature" type="FeatureType" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TargetStateType">
    <xs:annotation>
      <xs:documentation>
        Target State is a Mandatory for all types of request. And it specifies what needs to be done on SIM state.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="simState" type="SimStateType">
        <xs:annotation>
          <xs:documentation>
                SIM State is
            </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="SimStateType">
    <xs:annotation>
      <xs:documentation>
        SIM State is define the status of SIM, like ACTIVED, WARM (ACTIVATIONREADY),DEACTIVATED (SUSPENDED) and CANCELLED (PURGED) etc.
    </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ACTIVATIONREADY" />
      <xs:enumeration value="ACTIVATED" />
      <xs:enumeration value="DEACTIVATED" />
      <xs:enumeration value="PURGED" />
      <xs:enumeration value="UNKNOWN" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="SubscriberIdentifierType">
    <xs:annotation>
      <xs:documentation>
        Subscriber Identifier is to identify subscriber using IMSI and MSISDN number.
        MSISDN is NOT mandatory when SIM is in "WARM" state. But it is Mandatory when SIM in "ACTIVATED" or "SUSPENDED" etc.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="imsi" type="xs:string" />
      <xs:element name="msisdn" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SmsServiceType">
    <xs:annotation>
      <xs:documentation>
        SMS Service Type holds MT Quota, MO Quota and Combined Quota.
        MTQuota should be valued to "-1", when it is Unlimited
        MTQuota should be valued to "-1", when it is Unlimited
        CombinedQuota should be valued to "-1", when it is Unlimited
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="smsMTQuota" type="xs:integer" />
      <xs:element minOccurs="0" name="smsMOQuota" type="xs:integer" />
      <xs:element minOccurs="0" name="smsCombinedQuota" type="xs:integer" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ServiceType">
    <xs:annotation>
      <xs:documentation>
        Subscriber Service Details
        Data Services: provide the data provision details
        Voice Services:   provide the voice provision details
        SMS Services:  provide the SMS provision details
        Voicemail Services:  provide the voice mail provision details
        Call Forward Services:  provide the Call Forwarding provision details
        MMS Services:       provide the MMS provision details
        International Services:  provide the International services that include Voice International, SMS International and MMS International provision details.
        Roaming Zones: Roaming zone services that include Roaming Voice services, Roaming SMS services, Roaming Data services and Roaming MMS provision details.
        Extended Services:
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="dataServices" type="DataServiceType" />
      <xs:element minOccurs="0" name="voiceServices" type="VoiceServiceType" />
      <xs:element minOccurs="0" name="smsServices" type="SmsServiceType" />
      <xs:element minOccurs="0" name="voiceMailServices" type="VoiceMailServiceType" />
      <xs:element minOccurs="0" name="mmsServices" type="MmsServiceType" />
      <xs:element minOccurs="0" name="internationalServices" type="InternationalServiceType" />
      <xs:element minOccurs="0" name="roamingZones" type="RoamingZonesType" />
      <xs:element minOccurs="0" name="extendedServices" type="ExtendedServiceType" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="InternationalServiceType">
    <xs:annotation>
      <xs:documentation>
        International services include voice service, SMS service and MMS service
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="voiceServices" type="VoiceServiceType" />
      <xs:element minOccurs="0" name="smsServices" type="SmsServiceType" />
      <xs:element minOccurs="0" name="mmsServices" type="MmsServiceType" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ServiceDetailsType">
    <xs:annotation>
      <xs:documentation>
        Service details have important Service details like Base Offer Id (Providers Plan Name)
        Primary MSISDN - It is valued with MSISDN of the subscriber. In case of Family Plans, it will be valued with MSISDN of primary account holder. However, it is not a Mandatory field.
        Subscriber services details to describe voice, data, roaming, international, MMS and SMS services.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="baseOfferId" type="xs:string" />
      <xs:element minOccurs="0" name="primaryMsisdn" type="xs:string" />
      <xs:element name="services" type="ServiceType" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RoamingZonesType">
    <xs:annotation>
      <xs:documentation>
        Roaming Zone will define roaming zone details of the Subscriber. Describes what are the services (Data, Voice, MMS or SMS) are allowed in Roaming zones for given subscriber.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="roamingZone" type="RoamingZoneType" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RoamingZoneType">
    <xs:annotation>
      <xs:documentation>
        Roaming Zone name like "Mexico" or "Canada" or "UK" or "Asia" etc..
        Data service details in roaming zone.
        Voice service details in roaming zone.
        SMS service details in roaming zone.
        MMS service details in roaming zone.
        Voice Mail service details in roaming zone.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="zoneName" type="xs:string" />
      <xs:element minOccurs="0" name="dataServices" type="RoamDataServiceType" />
      <xs:element minOccurs="0" name="voiceServices" type="VoiceServiceType" />
      <xs:element minOccurs="0" name="smsServices" type="SmsServiceType" />
      <xs:element minOccurs="0" name="voiceMailServices" type="VoiceMailServiceType" />
      <xs:element minOccurs="0" name="mmsServices" type="MmsServiceType" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RequestKeyType">
    <xs:annotation>
      <xs:documentation>
        Request key is important key combination to identify the Subscriber in JW system.
        Billing Account Number is a unique number for each subscriber to maintain the account details.
        ICCID is identifies the individual subscriber in JW system.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="billingAccountNumber" type="xs:string" />
      <xs:element name="iccid" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MmsServiceType">
    <xs:annotation>
      <xs:documentation>
        Provide the MMS Service details like MMS Quota and MMQ Quality Of Service.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="mmsQuota" type="xs:integer" />
      <xs:element minOccurs="0" name="mmsQOS" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="FeatureType">
    <xs:annotation>
      <xs:documentation>
        Feature type is generic type maintains name/value pair
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="name" type="xs:string" />
      <xs:element name="value" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ExtendedServiceType">
    <xs:annotation>
      <xs:documentation>
        This section is to add new features that are not belongs to any fields/sections in the definition.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="extendedServiceFeature" type="FeatureType" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="successMessageType">
    <xs:annotation>
      <xs:documentation>
        Welcome message: After successful provision on Jasper System, send a message to Subscriber device.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="msgType" type="xs:string" />
      <xs:element minOccurs="0" name="msgText" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DeviceFeatureType">
    <xs:annotation>
      <xs:documentation>
        Subscriber device details:
        IMEI Number - Device (phone/tablet) IMEI details
        Device Features like MMS capable, Data capable or Feature phone details or Smart phone details
        Examples:
        MMS_CAPABLE - Yes/No
        DUAL_CAPABLE - Yes/No
        DA_CAPABLE - Yes/No
        CF_CAPABLE - Yes/No
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="imei" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                This field may have the device IMEI or IMEISV depending on various factors such as your operator's installation as well as the device itself.
            </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="unbounded" name="deviceFeature" type="FeatureType" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DataServiceType">
    <xs:annotation>
      <xs:documentation>
        Data Service details:
        RoamBandwidthRuleId is valued with 501 - Canada, 601 - Mexico and 701 North America (Canada And Mexico) for
        International Roaming data policy

        Data Quota is to measure the data package for the subscriber.
        If date is UNLIMITED, data Quota is valued with "-1" and data quota unit must be "Bytes".
        Data Quota Unit always in Bytes or KB or MB or GB
        Data QOS is quality of Service, example Speed of the data service.
        Band Width Rule id is mandatory field to identify the ZIG pre-defined rule names for data service.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="bandWidthRuleId" type="xs:string" />
      <xs:element name="dataQuota" type="xs:integer" />
      <xs:element name="dataQuotaUnit" type="DataQuotaUnitType" />
      <xs:element minOccurs="0" name="dataQOS" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RoamDataServiceType">
    <xs:sequence>
      <xs:element minOccurs="0" name="roamBandwidthRuleId" type="xs:string" />
      <xs:element name="dataQuota" type="xs:integer" />
      <xs:element name="dataQuotaUnit" type="DataQuotaUnitType" />
      <xs:element minOccurs="0" name="dataQOS" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ConsumerDetailType">
    <xs:annotation>
      <xs:documentation>
        Subscriber Personal Details:
        Subscriber Number is unique number that is defined in AMDOCS system.
        Subscriber Full Name (First Name, Middle Initial and Last Name)
        Subscriber Address but Only Postal Code is mandatory
        Subscriber Primary contact details like Phone or Email or Fax.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="subscriberNumber" type="xs:string" />
      <xs:element name="subscirberName" type="NameType" />
      <xs:element name="address" type="SubscriberAddressType" />
      <xs:element minOccurs="0" name="primaryContact" type="PrimaryContactType" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="NameType">
    <xs:annotation>
      <xs:documentation>
        Subscriber Name:  (Optional)
        First Name
        Middle Initial
        Last name

    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="firstName" type="xs:string" />
      <xs:element minOccurs="0" name="middleName" type="xs:string" />
      <xs:element minOccurs="0" name="lastName" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PrimaryContactType">
    <xs:annotation>
      <xs:documentation>
        Subscriber Primary Contact details: All fields are Optional
        Phone number
        Email Id
        Fax
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="phone" type="xs:string" />
      <xs:element minOccurs="0" name="email" type="xs:string" />
      <xs:element minOccurs="0" name="fax" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SubscriberAddressType">
    <xs:annotation>
      <xs:documentation>
        Subscriber Address Details: Only Postal Code is Mandatory.
        Address 1
        Address 2
        City
        State
        Country
        Postal code
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="address1" type="xs:string" />
      <xs:element minOccurs="0" name="address2" type="xs:string" />
      <xs:element minOccurs="0" name="city" type="xs:string" />
      <xs:element minOccurs="0" name="region" type="xs:string" />
      <xs:element minOccurs="0" name="countryCode" type="xs:string" />
      <xs:element name="postalCode" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:element name="CreateSubscriberRequest">
    <xs:annotation>
      <xs:documentation>
            Create the subscriber in ACTIVATION READY (WARM) or ACTIVATE states
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SubscriberRequestType">
          <xs:sequence>
            <xs:element name="requestKey" type="RequestKeyType" />
            <xs:element name="targetState" type="TargetStateType" />
            <xs:element name="subscriberIdentifiers" type="SubscriberIdentifierType" />
            <xs:element name="deviceFeatures" type="DeviceFeatureType" />
            <xs:element name="consumerDetails" type="ConsumerDetailType" />
            <xs:element name="serviceDetails" type="ServiceDetailsType" />
            <xs:element minOccurs="0" name="successSmsMsg" type="successMessageType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CreateSubscriberResponse">
    <xs:annotation>
      <xs:documentation>
            Send the Response to Subscriber after receiving and basic validation done on the request.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SubscriberResponseType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ChangeSubscriberStatusRequest">
    <xs:annotation>
      <xs:documentation>
            Change subscriber status
             This request is to change the subscriber status from one state to another state like
             ACTIVATE(RESTORE) to PURGE(SUSPEND)
             PURGE (SUSPEND) to ACTIVATE (RESTORE)
             ACTIVATE to DEACTIVATE
             DEACTIVATE to ACTIVATE

            bandwidthruleid is valued with 101,201,301...etc  Domestic data plan policy
            RoamBandwidthRuleId is valued with 501 - Canada, 601 - Mexico and 701 North America (Canada And Mexico) for
            International Roaming data policy

        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SubscriberRequestType">
          <xs:sequence>
            <xs:element name="requestKey" type="RequestKeyType" />
            <xs:element name="targetState" type="TargetStateType" />
            <xs:element minOccurs="0" name="bandwidthruleid" type="xs:string" />
            <xs:element minOccurs="0" name="roamBandwidthRuleId" type="xs:string" />
            <xs:element name="reason" type="xs:string" />
            <xs:element minOccurs="0" name="successSmsMsg" type="successMessageType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ChangeSubscriberStatusResponse">
    <xs:annotation>
      <xs:documentation>
	        Send the Response to Subscriber after receiving and basic validation done on the request.
	    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SubscriberResponseType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ChangeSubscriberIdentifierRequest">
    <xs:annotation>
      <xs:documentation>
              Change Subscriber Identifier Request.
                Here, change or update the Subscriber Identifier details like IMEI number and device features using  ICCID OR MSISDN.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SubscriberRequestType">
          <xs:sequence>
            <xs:element name="changeIdentifierKey" type="ChangeIdentifierKeyType" />
            <xs:element name="oldSubscriberIdentifiers" type="ChangeSubscriberIdentifierType" />
            <xs:element name="newSubscriberIdentifiers" type="ChangeSubscriberIdentifierType" />
            <xs:element name="oldDeviceFeatures" type="DeviceFeatureType" />
            <xs:element name="newDeviceFeatures" type="DeviceFeatureType" />
            <xs:element name="reason" type="xs:string" />
            <xs:element minOccurs="0" name="successSmsMsg" type="successMessageType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ChangeSubscriberIdentifierResponse">
    <xs:annotation>
      <xs:documentation>
            Send the Response to Subscriber after receiving and basic validation done on the request.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SubscriberResponseType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="ChangeIdentifierKeyType">
    <xs:annotation>
      <xs:documentation>
            Change Identifier Key record details.
            Billing Account Number is mandatory field
            Since Change Identifier request should be called by using ICCID or MSISDN. So no other values are allowed in Key Fields
        </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="billingAccountNumber" type="xs:string" />
      <xs:element name="keyField" type="KeyFieldType" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="KeyFieldType">
    <xs:sequence>
      <xs:element name="keyName" type="KeyNameType" />
      <xs:element name="keyValue" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="KeyNameType">
    <xs:annotation>
      <xs:documentation>
            Change Identifier request should be called by using ICCID or MSISDN.
        </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ICCID" />
      <xs:enumeration value="MSISDN" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="ChangeSubscriberIdentifierType">
    <xs:annotation>
      <xs:documentation>
            IMSI, MSISDN and ICCID are Optional.
        </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="imsi" type="xs:string" />
      <xs:element minOccurs="0" name="msisdn" type="xs:string" />
      <xs:element minOccurs="0" name="iccid" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:element name="ChangeSubscriberServiceRequest">
    <xs:annotation>
      <xs:documentation>
            Change Subscriber Service details, which are data services, voice services, voice mail services, SMS, MMS service details, International services and Roaming zone services.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SubscriberRequestType">
          <xs:sequence>
            <xs:element name="requestKey" type="RequestKeyType" />
            <xs:element name="serviceDetails" type="ServiceDetailsType" />
            <xs:element minOccurs="0" name="successSmsMsg" type="successMessageType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ChangeSubscriberServiceResponse">
    <xs:annotation>
      <xs:documentation>
            Send the Response to Subscriber after receiving and basic validation done on the request.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SubscriberResponseType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetSubscriberDetailsRequest">
    <xs:annotation>
      <xs:documentation>
            This request is used to get the subscriber service or device details from Jasper System for the given subscriber key details.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SubscriberRequestType">
          <xs:sequence>
            <xs:element name="requestKey" type="RequestKeyType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetSubscriberDetailsResponse">
    <xs:annotation>
      <xs:documentation>
        Get subscriber service or device details from Jasper System for the given subscriber key details.
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SubscriberResponseType">
          <xs:sequence>
            <xs:element minOccurs="0" name="subscriberDetails" type="SubscriberDetailsType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="SubscriberDetailsType">
    <xs:annotation>
      <xs:documentation />
    </xs:annotation>
    <xs:sequence>
      <xs:element name="subscriberStatus" type="TargetStateType" />
      <xs:element name="subscriberIdentifiers" type="SubscriberIdentifierType" />
    </xs:sequence>
  </xs:complexType>
  <xs:element name="SubscriberSendSMSByMsisdnRequest">
    <xs:annotation>
      <xs:documentation>
            Send SMS message to device. Message length should be less than 160 characters
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SubscriberRequestType">
          <xs:sequence>
            <xs:element name="requestKey" type="RequestKeyType" />
            <xs:element name="sentToMsisdn" type="xs:string" />
            <xs:element name="messageText" type="xs:string" />
            <xs:element name="messageTextEncoding" type="messageTextEncodingType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="messageTextEncodingType">
    <xs:annotation>
      <xs:documentation>
        Composite field specifying the encoding format of the message text being supplied as input to the API call (defaults to LITERAL) as well as the desired encoding scheme to be used while submitting the message to the SMSC. Supported values for Get SMS APIs include LITERAL and BASE64. Supported values for Send SMS APIs include all the values noted below.
    </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="LITERAL" />
      <xs:enumeration value="BASE64" />
      <xs:enumeration value="LITERAL_IRA" />
      <xs:enumeration value="BASE64_IRA" />
      <xs:enumeration value="LITERAL_BINARY" />
      <xs:enumeration value="BASE64_BINARY" />
      <xs:enumeration value="LITERAL_GSM7" />
      <xs:enumeration value="BASE64_GSM7" />
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="SubscriberSendSMSByMsisdnResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SubscriberResponseType">
          <xs:sequence>
            <xs:element name="smsMsgId" type="xs:long" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ChangeServicePolicyRequest">
    <xs:annotation>
      <xs:documentation>
            Change the Subscriber Bandwidth rule id to update the data throttle and un-throttle.
            bandwidthruleid is valued with 101,201,301...etc  Domestic data plan policy
            RoamBandwidthRuleId is valued with 501 - Canada, 601 - Mexico and 701 North America (Canada And Mexico) for
            International Roaming data policy

        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SubscriberRequestType">
          <xs:sequence>
            <xs:element name="requestKey" type="RequestKeyType" />
            <xs:element name="bandwidthruleid" type="xs:string" />
            <xs:element minOccurs="0" name="roamBandwidthRuleId" type="xs:string" />
            <xs:element name="reason" type="xs:string" />
            <xs:element minOccurs="0" name="successSmsMsg" type="successMessageType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ChangeServicePolicyResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SubscriberResponseType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ChangeVoicemailPasswordRequest">
    <xs:annotation>
      <xs:documentation>
            Change Subscriber Voice mail password.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SubscriberRequestType">
          <xs:sequence>
            <xs:element name="voicemailKey" type="SubscriberVoicemailKey" />
            <xs:element name="changeVoicemailPasswordDetails" type="ChangeVoiceMailPasswordType" />
            <xs:element minOccurs="0" name="successSmsMsg" type="successMessageType" />
            <xs:element minOccurs="0" name="successEmailMsg" type="successEmailMessageType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="SubscriberVoicemailKey">
    <xs:annotation>
      <xs:documentation>
       Voicemail key details
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="billingAccountNumber" type="xs:string" />
      <xs:element name="msisdn" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ChangeVoiceMailPasswordType">
    <xs:annotation>
      <xs:documentation>
        Voicemail key details
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="command">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="RESET_PASSWORD" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="successEmailMessageType">
    <xs:annotation>
      <xs:documentation>
        Welcome message: After successful provision on Jasper System, send a message to Subscriber device.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="emailAddress" type="xs:string" />
      <xs:element name="emailSubject" type="xs:string" />
      <xs:element name="emailText" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:element name="ChangeVoicemailPasswordResponse">
    <xs:annotation>
      <xs:documentation>
        Send the Response to Subscriber after receiving and basic validation done on the request.
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SubscriberResponseType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SendPortInCompleteForMSISDNRequest">
    <xs:annotation>
      <xs:documentation>
            Send PortIn Complete request For MSISDN
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SubscriberRequestType">
          <xs:sequence>
            <xs:element name="requestKey" type="RequestKeyType" />
            <xs:element name="msisdn" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SendPortInCompleteForMSISDNResponse">
    <xs:annotation>
      <xs:documentation>
        Send the Response to Subscriber after using Send PortIn Complete For MSISDN request.
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="SubscriberResponseType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="EditTerminalLocationTrackingRequest">
    <xs:annotation>
      <xs:documentation>
        Edit to start/stop tracking location on a terminal.
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:annotation>
              <xs:documentation>
                        The request should contain msisdn and/or imsi as Terminal ID. This is validated in Java codes.
                    </xs:documentation>
            </xs:annotation>
            <xs:element minOccurs="0" name="msisdn" type="xs:string" />
            <xs:element minOccurs="0" name="imsi" type="xs:string" />
            <xs:element name="activityCode">
              <xs:annotation>
                <xs:documentation>
                            Activity codes to START or STOP tracking location.
                        </xs:documentation>
              </xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="START" />
                  <xs:enumeration value="STOP" />
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
            <xs:element minOccurs="0" name="pushURL" type="xs:anyURI">
              <xs:annotation>
                <xs:documentation>
                            An URL to start sending the PUSH notifications to.

                            This element is optional. This can be preconfigured at the operator level, along with
                            PUSH API shared secret.
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="startDateTime" type="xs:dateTime">
              <xs:annotation>
                <xs:documentation>
                            The start date and time in UTC for when to start tracking this target. Only used for START code.

                            This element is optional, if omitted indicating the start date and time value is set
                            to current date time.
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="EditTerminalLocationTrackingResponse">
    <xs:annotation>
      <xs:documentation>
        Response for EditTerminalLocationTracking API call.
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:annotation>
              <xs:documentation>
                        The response should contain msisdn and/or imsi as Terminal ID. Required field.
                    </xs:documentation>
            </xs:annotation>
            <xs:element minOccurs="0" name="msisdn" type="xs:string" />
            <xs:element minOccurs="0" name="imsi" type="xs:string" />
            <xs:element name="status">
              <xs:annotation>
                <xs:documentation>
                            Response Status type will hold the result of the request. It will have SUCCESS, or
                            UNKNOWN TERMINAL OR STOPPED ALREADY values.
                            UNKNOWN TERMINAL OR STOPPED ALREADY means that terminal is unknown, or have been stopped already.
                        </xs:documentation>
              </xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="SUCCESS" />
                  <xs:enumeration value="UNKNOWN TERMINAL OR STOPPED ALREADY" />
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTrackedTerminalsRequest">
    <xs:annotation>
      <xs:documentation>
            Get a list of terminals which is currently being tracked.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="0" name="sinceDateTime" type="xs:dateTime">
              <xs:annotation>
                <xs:documentation>
                                This element is optional, return a list since the sinceDateTime in UTC, if omitted
                                indicating to return up to 1000 targets
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTrackedTerminalsResponse">
    <xs:annotation>
      <xs:documentation>
        Response for GetTrackedTerminalsRequest API call.
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="trackedTerminals">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" maxOccurs="1000" name="trackedTerminal">
                    <xs:annotation>
                      <xs:documentation>
                                        Maximum 1000 targets.
                                    </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                      <xs:sequence>
                        <xs:annotation>
                          <xs:documentation>
                                                The response should contain msisdn and/or imsi as Terminal ID. Required field.
                                            </xs:documentation>
                        </xs:annotation>
                        <xs:element minOccurs="0" name="msisdn" type="xs:string" />
                        <xs:element minOccurs="0" name="imsi" type="xs:string" />
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="EditAccountRequest">
    <xs:annotation>
      <xs:documentation>
        Note: not all fields in AccountType can be edited. Only these fields can be edited:
            AccountName
            PrimaryContact
            ShippingAddress
            OperatorAccountId
            Billing
             Address
             Contact
             CurrencyCode
             taxId
            Support
             ShowJasperSupport
             ShowSpSupport
             Email
             Phone
            CustomFields
             FieldValue1
             FieldValue2
             FieldValue3
             FieldValue4
             FieldValue5
             FieldValue6
             FieldValue7
             FieldValue8
             FieldValue9
             FieldValue10
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="unbounded" name="account" type="AccountType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="EditAccountResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="errorMessage" type="ResponseStatusType" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="UpdateSecureSimCredentialsRequest">
    <xs:annotation>
      <xs:documentation>
            Update the credentials for a secure sim
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccids">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="unbounded" name="iccid" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="username" type="xs:string" />
            <xs:element name="password" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="UpdateSecureSimCredentialsResponse">
    <xs:annotation>
      <xs:documentation />
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="message" type="xs:string" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="TransferSimsToAccountRequest">
    <xs:annotation>
      <xs:documentation>
            Transfer the SIMs from one account to another.

            ICCID and Transfer status is returned as response.

            For tranfers between standard accounts, the Custom Fields will be carried over. For transfers to or from the
            inventory account, the Custom Fields will be cleared.
            For tranfers between standard accounts, the Attributes will be carried over. For transfers to or from the
            inventory account, the Attributes will be cleared.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccidList">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="unbounded" name="iccid" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="accountId" type="xs:long" />
            <xs:element minOccurs="0" name="ratePlanName" type="xs:string" />
            <xs:element minOccurs="0" name="commPlanName" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="TransferSimsToAccountResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="simTransferToAccountStatusList">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="unbounded" name="simtransfertoaccountstatus" type="SimTransferToAccountStatusType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="AssignOrUpdateIPAddressRequest">
    <xs:annotation>
      <xs:documentation>
            Assign or Update the IP Address.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="1" name="iccid" type="xs:string" />
            <xs:element minOccurs="1" name="apn" type="xs:string" />
            <xs:element minOccurs="1" name="ipAddress" type="xs:string" />
            <xs:element minOccurs="0" name="pdpId" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="AssignOrUpdateIPAddressResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>
                            Assign or Update IP Address Status:
                            "SUCCESS": True,
                            "FAILURE": False
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="errormessage" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="AttMarketServiceArea">
    <xs:sequence>
      <xs:annotation>
        <xs:documentation>
                ATT CSI market service area
            </xs:documentation>
      </xs:annotation>
      <xs:element minOccurs="0" name="billingMarket" type="xs:string" />
      <xs:element minOccurs="0" name="billingSubMarket" type="xs:string" />
      <xs:element minOccurs="0" name="serviceArea" type="xs:string" />
      <xs:element minOccurs="0" name="conversionId" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:element name="AddRoutableMSISDNRequest">
    <xs:annotation>
      <xs:documentation>
        allow a Customer to request a routable MSISDN.
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="addressLine1" type="xs:string" />
            <xs:element name="addressLine2" type="xs:string" />
            <xs:element name="city" type="xs:string" />
            <xs:element name="state" type="xs:string" />
            <xs:element minOccurs="0" name="zip" type="xs:string" />
            <xs:element minOccurs="0" name="country" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="AddRoutableMSISDNResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="code" type="xs:string" />
            <xs:element name="description" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ManageDialableMSISDNRequest">
    <xs:annotation>
      <xs:documentation>
            allow a Customer to request a routable MSISDN.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="action">
              <xs:simpleType>
                <xs:annotation>
                  <xs:documentation>
                                    Action type:
                                    "GET": request MSISDN
                                    "RELEASE": return MSISDN
                                </xs:documentation>
                </xs:annotation>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="GET" />
                  <xs:enumeration value="RELEASE" />
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
            <xs:element minOccurs="0" name="ServiceAreasSelector">
              <xs:annotation>
                <xs:documentation>
                                Mandatory for GET action. MarketCode is selected for Europe area.
                            </xs:documentation>
              </xs:annotation>
              <xs:complexType>
                <xs:choice>
                  <xs:element name="zipcode" type="xs:string" />
                  <xs:element name="marketCode" type="xs:string" />
                </xs:choice>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="type">
              <xs:simpleType>
                <xs:annotation>
                  <xs:documentation>
                                    Mandatory for GET action.
                                    Type:
                                    "R": reseller
                                    "D": direct
                                </xs:documentation>
                </xs:annotation>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="R" />
                  <xs:enumeration value="D" />
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
            <xs:element name="callbackUrl" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Callback URL for sending confirmation of request processed
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ManageDialableMSISDNResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="code" type="xs:string" />
            <xs:element name="description" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="AddCustomSubscriberChargeRequest">
    <xs:annotation>
      <xs:documentation>
        add charges or credits to a specific SIM.
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="chargetype" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Charge Types:
                            "TRIAL_FEE": Trial,
                            "CUSTOMER_BOUNTY": Bounty,
                            "TRIALFEE_CREDIT": returns a vehicle before they consume any of the trial
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="SocOrderID" type="xs:string" />
            <xs:element minOccurs="0" name="SessionID" type="xs:string" />
            <xs:element minOccurs="0" name="SocCode" type="xs:string" />
            <xs:element minOccurs="0" name="TLGBan" type="xs:string" />
            <xs:element minOccurs="0" name="PlanActivationDate" type="xs:dateTime" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="AddCustomSubscriberChargeResponse">
    <xs:annotation>
      <xs:documentation>
        Response for Add Custom Subscriber Charge API call
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="0" name="iccid" type="xs:string" />
            <xs:element minOccurs="0" name="chargetype" type="xs:string" />
            <xs:element name="status" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Status of the request. Success or Failure.
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ATTBountyEventNotificationRequest">
    <xs:annotation>
      <xs:documentation>
            API that ATT will notify Jasper (via APIs) on relevant plan purchases, cancellations, updates etc.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="action" type="xs:int">
              <xs:annotation>
                <xs:documentation>
                                0 = New Consumer Notification
                                1 = Add SOC
                                2 = Expire SOC
                                3 = Cancel SOC
                                4 = Update SOC
                                5 = Activate SOC
                                6 = Chargeback
                                7 = SIM Replacement
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="socType" type="xs:int">
              <xs:annotation>
                <xs:documentation>
                                0 = MRC Plan
                                1 = Multi Month Session
                                2 = Auto Renew Session
                                3 = One time Session
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="tlgban" type="xs:string" />
            <xs:element minOccurs="0" name="SocOrderId" type="xs:string" />
            <xs:element minOccurs="0" name="SocCode" type="xs:string" />
            <xs:element minOccurs="0" name="sessionId" type="xs:string" />
            <xs:element minOccurs="0" name="startDate" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Retail Plan Start Date
                                Date format: YYYYMMDD
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="autoRenewStatus" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>
                                auto renew status: true/false
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="replacementIccid" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ATTBountyEventNotificationResponse">
    <xs:annotation>
      <xs:documentation>
        Response for ATT Retail Plan Bounty Update call
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="0" name="iccid" type="xs:string" />
            <xs:element minOccurs="0" name="action" type="xs:int" />
            <xs:element name="status" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Status of the request. Success or Failure.
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="HLRCallbackStatusRequest">
    <xs:annotation>
      <xs:documentation>
                Callback webservice provided by Jasper for HLR or vendor to send status back for async HLR APIs.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="channelTransactionId" type="xs:string" />
            <xs:element minOccurs="0" name="functionId" type="xs:string" />
            <xs:element minOccurs="0" name="requestorChannelId" type="xs:string" />
            <xs:element minOccurs="0" name="requesortUserId" type="xs:string" />
            <xs:element minOccurs="0" name="imsi" type="xs:string" />
            <xs:element minOccurs="0" name="msisdn" type="xs:string" />
            <xs:element name="errorCode" type="xs:string" />
            <xs:element name="errorMessage" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="HLRCallbackStatusResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:string" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="UpdateOrderStatusRequest">
    <xs:annotation>
      <xs:documentation>
            Updates the status of Sim Order
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="orderId" type="xs:long" />
            <xs:element name="orderStatus" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Order Status:
                                "NEW": New,
                                "IN_PROGRESS": In Progress,
                                "READY_FOR_APPROVAL": Ready for Approval,
                                "DENIED": Denied
                                "APPROVED": Approved
                                "3PLACCEPTED": Third party logistics accepted,
                                "3PLREJECTED": Third party logistics rejected,
                                "SHIPPED": Shipped,
                                "PARTIALLY_SHIPPED": Partially Shipped,
                                "COMPLETED": Completed
                                "CANCELLED": Cancelled
                                "ON_HOLD": On Hold
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="statusUpdateNote">
              <xs:annotation>
                <xs:documentation>
                                These notes only appear in the SIM Order audit trail. This DOES NOT update the Notes field of the SIM Order. Limited to 500 characters.
                            </xs:documentation>
              </xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:maxLength value="500" />
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="trackingNumber">
              <xs:annotation>
                <xs:documentation>
                                Changes appear in the SIM Order audit trail. Updates the Tracking Number field of the SIM Order. Limited to 200 characters.
                            </xs:documentation>
              </xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:maxLength value="200" />
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="UpdateOrderStatusResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Reponse Status: SUCCESS, FAILURE
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="statusReason" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Reponse Status Reasons:
                            "SUCCESS": Success,
                            "FAILURE_MISSING_ORDER_ID": Order id is a mandatory field,
                            "FAILURE_MISSING_ORDER_STATUS": Order status is a mandatory field,
                            "FAILURE_INVALID_ORDER_ID": Invalid order id,
                            "FAILURE_INVALID_ORDER_STATUS": Given state is not valid,
                            "FAILURE_NOTES_TOO_LONG": Status Update notes has too many characters,
                            "FAILURE_CANNOT_CHANGE_STATUS": The new state is not allowed for this order,
                            "FAILURE": General failure,
                            "RESTRICT_PRIVILEGE":User don't have the privilege to change order status
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="UpdateMsisdnRequest">
    <xs:annotation>
      <xs:documentation>
            Updates the MSISDN to SIM
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="msisdn" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Acceptable MSISDN values: A number or string 'default'.
                                If 'default' is received, system will assign a dummy MSISDN.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="UpdateMsisdnResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="msisdn" type="xs:string" />
            <xs:element name="status" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Reponse Status:
                                "SUCCESS": Success,
                                "FAILURE": Failure
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="OTAMsisdnRequest">
    <xs:annotation>
      <xs:documentation>
            OTA the MSISDN
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="msisdn" type="xs:string" />
            <xs:element minOccurs="0" name="callbackUrl" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Callback URL for confirmation response
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="msisdnMismatchOverride" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>
                                Msisdn Mismatch Override values:
                                    "true" : Set to True will allow OTA'ing an MSISDN even if this MSISDN does not match what is provisioned on the network.
                                    "false": Set to False, the system will return an error if MSISDN to be OTA'ed does not match what is provisioned in the network.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="OTAMsisdnResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Reponse Status:
                                "SUCCESS": Success,
                                "FAILURE": Failure
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="OTANADResetRequest">
    <xs:annotation>
      <xs:documentation>
            OTA NAD Reset
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element minOccurs="0" name="callbackUrl" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Callback URL for confirmation response
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="OTANADResetResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Reponse Status:
                                "SUCCESS": Success,
                                "FAILURE": Failure
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalAuditTrailRequest">
    <xs:annotation>
      <xs:documentation>
            Get the audit trail details
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element minOccurs="0" name="daysOfHistory" type="xs:int">
              <xs:annotation>
                <xs:documentation>
                                Number of days of history. If not specified, default is 30 days.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetTerminalAuditTrailResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="terminalAuditTrails">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" maxOccurs="unbounded" name="terminalAuditTrail" type="TerminalAuditTrailType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="TerminalAuditTrailType">
    <xs:annotation>
      <xs:documentation>
            The detail information about Audit Trail.
        </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="field" type="xs:string" />
      <xs:element minOccurs="0" name="priorValue" type="xs:string" />
      <xs:element name="value" type="xs:string" />
      <xs:element name="effectiveDate" type="xs:dateTime" />
      <xs:element name="status" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                    Audit trail Status:
                    "Pending": Pending,
                    "Running": Running,
                    "Executed": Executed,
                    "Error": Error,
                    "Deleted": Deleted,
                    "Cancelled": Cancelled,
                    "WaitingRetry": WaitingRetry
                </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="userName" type="xs:string" />
      <xs:element minOccurs="0" name="delegatedUser" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:element name="GetExtendedTerminalDetailsRequest">
    <xs:annotation>
      <xs:documentation>
            Get the extended attributes like SimAuxFields and RawSim for a list of terminals (given list of iccids).
            At least one iccid should be provided, maximum limit is 50 for performance reasons.

            The returned results are not guaranteed to be in the same ordering as the request.
            Not found terminals will not be part of the result.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccids">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" name="iccid" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetExtendedTerminalDetailsResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="1" name="extendedTerminalDetails">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" name="extendedTerminal" type="ExtendedTerminalType" />
                  <xs:element name="getExtendedTerminalStatus" type="SimTransferResponseType" />
                  <xs:element minOccurs="0" name="simId" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="AddTerminalRequest">
    <xs:annotation>
      <xs:documentation>
            Create a new SIM
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="1" name="AddTerminal">
              <xs:complexType>
                <xs:annotation>
                  <xs:documentation>
                                    The detail information about SIM being added.
                                </xs:documentation>
                </xs:annotation>
                <xs:sequence>
                  <xs:element name="iccid" type="xs:string" />
                  <xs:element name="externalSimProfileId" type="xs:string" />
                  <xs:element name="sourceOperatorName" type="xs:string" />
                  <xs:element name="targetOperatorName" type="xs:string" />
                  <xs:element minOccurs="0" name="terminalId" type="xs:string" />
                  <xs:element minOccurs="0" name="modemId" type="xs:string" />
                  <xs:element name="suspended" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>
                                            Suspended: "Y" for Yes, "N" for No, or "F" for Fraud Review
                                        </xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element name="status" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>
                                            SIM Status:
                                            "TEST_READY_NAME": Test Ready,
                                            "INVENTORY_NAME": Inventory,
                                            "TRIAL_NAME": Trial,
                                            "ACTIVATION_READY_NAME": Activation Ready,
                                            "ACTIVATED_NAME": Activated,
                                            "DEACTIVATED_NAME": Deactivated,
                                            "RETIRED_NAME": Retired,
                                            "PURGED_NAME": Purged,
                                            "REPLACED_NAME": Replaced
                                        </xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element name="dateAdded" type="xs:dateTime">
                    <xs:annotation>
                      <xs:documentation>
                                            When the terminal is first added to the system.
                                        </xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element minOccurs="0" name="dateShipped" type="xs:dateTime">
                    <xs:annotation>
                      <xs:documentation>
                                            When the terminal is shipped.
                                        </xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element name="imsi" type="xs:string" />
                  <xs:element minOccurs="0" name="primaryICCID" type="xs:string" />
                  <xs:element minOccurs="0" name="imei" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>
                                            This field may have the device IMEI or IMEISV depending on various factors such as your operator's installation as well as the device itself.
                                        </xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element minOccurs="0" name="simNotes" type="xs:string" />
                  <xs:element name="version" type="xs:int" />
                  <xs:element minOccurs="0" name="pin1" type="xs:string" />
                  <xs:element minOccurs="0" name="puk1" type="xs:string" />
                  <xs:element minOccurs="0" name="pin2" type="xs:string" />
                  <xs:element minOccurs="0" name="puk2" type="xs:string" />
                  <xs:element minOccurs="0" name="kiEnc" type="xs:string" />
                  <xs:element minOccurs="0" name="adm3" type="xs:string" />
                  <xs:element minOccurs="0" name="adm4" type="xs:string" />
                  <xs:element minOccurs="0" name="acc" type="xs:string" />
                  <xs:element minOccurs="0" name="dlKey" type="xs:string" />
                  <xs:element minOccurs="0" name="dualImsiCapable" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>
                                            DualImsiCapable: "Y" for Yes, "N" for No
                                        </xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element minOccurs="0" name="dualImsiEnabled" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>
                                            DualImsiEnabled: "Y" for Yes, "N" for No
                                        </xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element minOccurs="0" name="simBound" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>
                                            SimBound: "Y" for Yes, "N" for No
                                        </xs:documentation>
                    </xs:annotation>
                  </xs:element>
                  <xs:element minOccurs="0" name="adm1" type="xs:string" />
                  <xs:element minOccurs="0" name="adm2" type="xs:string" />
                  <xs:element minOccurs="0" name="secureSimId" type="xs:string" />
                  <xs:element minOccurs="0" name="custom1" type="xs:string" />
                  <xs:element minOccurs="0" name="custom2" type="xs:string" />
                  <xs:element minOccurs="0" name="custom3" type="xs:string" />
                  <xs:element minOccurs="0" name="customerCustom1" type="xs:string" />
                  <xs:element minOccurs="0" name="customerCustom2" type="xs:string" />
                  <xs:element minOccurs="0" name="customerCustom3" type="xs:string" />
                  <xs:element minOccurs="0" name="customerCustom4" type="xs:string" />
                  <xs:element minOccurs="0" name="customerCustom5" type="xs:string" />
                  <xs:element minOccurs="0" name="operatorCustom1" type="xs:string" />
                  <xs:element minOccurs="0" name="operatorCustom2" type="xs:string" />
                  <xs:element minOccurs="0" name="operatorCustom3" type="xs:string" />
                  <xs:element minOccurs="0" name="operatorCustom4" type="xs:string" />
                  <xs:element minOccurs="0" name="operatorCustom5" type="xs:string" />
                  <xs:element minOccurs="0" name="globalSimType" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>
                                            Global SIM Type:
                                            "GLOBAL_PRIMARY": Global Primary,
                                            "GLOBAL_VIRTUAL": Global Virtual
                                        </xs:documentation>
                    </xs:annotation>
                  </xs:element>
                </xs:sequence>
                <xs:attribute name="msisdn" type="xs:string">
                  <xs:annotation>
                    <xs:documentation>
                                        The MSISDN of the SIM.
                                    </xs:documentation>
                  </xs:annotation>
                </xs:attribute>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="copyCustomFields" type="xs:boolean" />
            <xs:element name="targetAccountName" type="xs:string" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="AddTerminalResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="1" name="AddTerminalStatusResponse">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="addTerminalStatus" type="SimTransferResponseType" />
                  <xs:element name="newSimId" type="xs:string" />
                  <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="DeactivateTerminalRequest">
    <xs:annotation>
      <xs:documentation>
            Mark a SIM as non-live
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="1" name="DeactivateTerminal">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="simId" type="xs:long" />
                  <xs:element name="iccid" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="DeactivateTerminalResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="1" name="DeactivateTerminalStatus">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="DeactivateTerminal" type="SimTransferResponseType" />
                  <xs:element name="simId" type="xs:string" />
                  <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="UpdateImsiDetailsRequest">
    <xs:annotation>
      <xs:documentation>
            Re-activate the SIM
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="1" name="UpdateImsiDetails">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="iccid" type="xs:string" />
                  <xs:element name="simId" type="xs:long" />
                  <xs:element name="accountName" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="UpdateImsiDetailsResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="1" name="UpdateImsiDetailsStatus">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="UpdateImsiDetails" type="SimTransferResponseType" />
                  <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SendCancelLocationRequest">
    <xs:annotation>
      <xs:documentation>
            Send cancel location request
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SendCancelLocationResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Reponse Status:
                                "SUCCESS": Success,
                                "FAILURE": Failure
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="OTAPlmnRefreshRequest">
    <xs:annotation>
      <xs:documentation>
            OTA the MSISDN
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element minOccurs="0" name="callbackUrl" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Callback URL for confirmation response
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="OTAPlmnRefreshResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Reponse Status:
                                "SUCCESS": Success,
                                "FAILURE": Failure
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="UpdateSubscriberPolicyRequest">
    <xs:annotation>
      <xs:documentation>
            Update a subscriber's network policy for a given APN and/or Data Stream. This API only works if the necesary pre-requisites have been met and isn't available generically.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="imsi" type="xs:string" />
            <xs:element minOccurs="0" name="iccid" type="xs:string" />
            <xs:element minOccurs="0" name="effectiveDate" type="xs:dateTime">
              <xs:annotation>
                <xs:documentation>
                                Defaults to 'Current Date/Time' if no value is provided. Expected format (value in UTC Timezone): "yyyy-MM-dd'T'HH:mm:ss'Z'".
                                Refer: https://www.w3.org/TR/xmlschema-2/#dateTime
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="inlineProcess" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>
                                Restricted internal usage. Don't set unless instructed by your Technical Account Manager.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="notificationURL" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                URL for the async call back notifications
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="subscriberPolicies">
              <xs:annotation>
                <xs:documentation>
                                Base policies for the specific APN and/or Data Stream as configured for the account
                            </xs:documentation>
              </xs:annotation>
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" name="subscriberPolicy" type="SubscriberPolicyType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="additionalPolicies">
              <xs:annotation>
                <xs:documentation>
                                Additonal policies for the subscriber as configured for the account
                           </xs:documentation>
              </xs:annotation>
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" maxOccurs="unbounded" name="additionalPolicy" type="AdditionalPolicyType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="UpdateSubscriberPolicyResponse">
    <xs:annotation>
      <xs:documentation>
            Response for Update Subscriber Policy API call
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="0" name="iccid" type="xs:string" />
            <xs:element name="imsi" type="xs:string" />
            <xs:element name="status" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Status of the syncronous request. Success or Failure.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="SubscriberPolicyType">
    <xs:annotation>
      <xs:documentation>
            The detail information about Subscriber Policy.
        </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="apnName" type="xs:string" />
      <xs:element minOccurs="0" name="streamId" type="xs:int">
        <xs:annotation>
          <xs:documentation>
                    A valid Data Stream ID. If not provided, the policy will be applied to the entire APN. For some APNs Stream ID may be mandatory. Please contact your Technical Account Manager for details.
                </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="policyAction" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                    Policy Actions: Only values configured for the account are valid. Please contact your Technical Account Manager for details.
                </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AdditionalPolicyType">
    <xs:annotation>
      <xs:documentation>
           Additonal policies for the subscriber as configured for the account. Only values configured for the account are valid.
       </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" maxOccurs="1" name="Name">
        <xs:simpleType>
          <xs:annotation>
            <xs:documentation>
                      Additional policy name
                   </xs:documentation>
          </xs:annotation>
          <xs:restriction base="xs:string" />
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="1" maxOccurs="1" name="Value">
        <xs:simpleType>
          <xs:annotation>
            <xs:documentation>
                       Additional policy value.
                   </xs:documentation>
          </xs:annotation>
          <xs:restriction base="xs:string" />
        </xs:simpleType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="GetSubscriberPolicyDetailsRequest">
    <xs:annotation>
      <xs:documentation>
            allow a Customer to query a pcrf subscriber policy details
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetSubscriberPolicyDetailsResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="policy" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetPolicyQuotaInfoRequest">
    <xs:annotation>
      <xs:documentation>
            Get the policy quota information from PCRF.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="1" name="imsi" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetPolicyQuotaInfoResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="quotaInfo">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" maxOccurs="unbounded" name="quota" type="QuotaInfoType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SetSubscriberPolicyStateRequest">
    <xs:annotation>
      <xs:documentation>
            Update the subscriber's policy for a given APN and Data Stream
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="imsi" type="xs:string" />
            <xs:element name="key" type="xs:string" />
            <xs:element name="value" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SetSubscriberPolicyStateResponse">
    <xs:annotation>
      <xs:documentation>
            Response for Update Subscriber Policy API call
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="imsi" type="xs:string" />
            <xs:element name="status" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Status of the syncronous request. Success or Failure.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="AccountTransferRequest">
    <xs:annotation>
      <xs:documentation>
            Create a new SIM
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="unbounded" name="AccountTransfer">
              <xs:complexType>
                <xs:annotation>
                  <xs:documentation>
                                    The detail information about SIM being transferred across SPs.
                                </xs:documentation>
                </xs:annotation>
                <xs:sequence>
                  <xs:element name="authtoken" type="xs:string" />
                  <xs:element name="iccid" type="xs:string" />
                  <xs:element name="simid" type="xs:long" />
                  <xs:element name="sourceuser" type="xs:string" />
                  <xs:element name="globaluser" type="xs:string" />
                  <xs:element name="targetaccount" type="xs:string" />
                  <xs:element name="requestoraccountid" type="xs:long" />
                  <xs:element name="messageid" type="xs:string" />
                  <xs:element name="sourceaccount" type="xs:string" />
                  <xs:element name="sourceoperator" type="xs:string" />
                  <xs:element name="targetoperator" type="xs:string" />
                  <xs:element name="globalaccount" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="AccountTransferResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="unbounded" name="AccountTransferStatusResponse">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="accountTransferStatus" type="SimTransferResponseType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetPeeredAccountsRequest">
    <xs:annotation>
      <xs:documentation>
            Get all the peered accounts of the account belonging to user making the request
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetPeeredAccountsResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="unbounded" name="peeredAccountDetails">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="accountName" type="xs:string" />
                  <xs:element name="operatorName" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="errorCode" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            High-level Error Code. That defines the Validation errors, Business rule validation errors or processing Errors. E.g.: 1800109
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="errorDetails" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Details of the each error message possible input values. E.g. Account mapping not defined for Global SIM transfer
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ManageSubscriberProfileRequest">
    <xs:annotation>
      <xs:documentation>
            The request for changing the subscriber's policy states.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccids">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="unbounded" name="iccid" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="directives">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="unbounded" name="directive" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ManageSubscriberProfileResponse">
    <xs:annotation>
      <xs:documentation>
        The response for changing the subscriber's policy states.
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="unbounded" name="iccids">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="iccid" type="xs:string" />
                  <xs:element name="status" type="ResponseStatusType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CreateUserForPartnersRequest">
    <xs:annotation>
      <xs:documentation>
                Creates a user with the given information for external partners.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="username" type="xs:string" />
            <xs:element name="operatorName" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                        Service Provider Name. E.g. "ZIGATT"
                                    </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="accountName" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                        Account Name. E.g. "ZIGATT"
                                        If account name is not present, will use operatorName as account name.
                                    </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="customerName" type="xs:string" />
            <xs:element name="contact" type="UserContactType" />
            <xs:element name="timezone" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                         Support TimeZone IDs from java.util.TimeZone#getAvailableIDs(). E.g. America/Los_Angeles
                                     </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="language" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                        Support Language IDs
                                        en, en_GB, pt, pt_PT, es, es_ES, de, fr, hu, ja, ru, nl, zh_CN, zh_TW, in_ID .
                                        If send a not supported language id will fall back to en
                                    </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="role" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                        roles allow to create.
                                        E.g. SERVICEPROVIDERCAREUSER, SERVICEPROVIDERCAREREADONLY
                                    </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="welcomeEmail" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>
                                    Receive a welcome email or not, default is true
                                    User will setup password via the "Password Setup" link in the welcome email
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="loginType" type="LoginTypeEnum" />
            <xs:element minOccurs="0" name="sharedSecretToken" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    shared secret token is used to validate user in SAML assertion.
                                    If login type is USERNAMEPASSWORDANDSAML or SAML, the username and the sharedSecretToken are used to authenticate user in SAML assertion
                                    The string is up to 512 long characters excluding inner spaces, commas and asterisks
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="externalId" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    exteralId is used to tracking external login via SAML assertion.
                                    exteralId could be email address, external username, ...etc which is unique per operator to track the external login to control center via SAML assertion.
                                    The string is up to 512 long characters excluding inner spaces, commas and asterisks
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CreateUserForPartnersResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:boolean" />
            <xs:element minOccurs="0" name="errorMessage" type="ResponseStatusType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="UserContactType">
    <xs:sequence>
      <xs:annotation>
        <xs:documentation>
                firstName, LastName and Email are required. Phone is optional
            </xs:documentation>
      </xs:annotation>
      <xs:element name="firstName" type="xs:string" />
      <xs:element name="lastName" type="xs:string" />
      <xs:element minOccurs="0" name="phone" type="xs:string" />
      <xs:element name="email" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="LoginTypeEnum">
    <xs:annotation>
      <xs:documentation>
        Define Enum for User Login Type. We allow three changes: USERNAMEPASSWORDANDSAML, USERNAMEPASSWORD, SAML
        USERNAMEPASSWORDANDSAML - allow user to login to control center via username password login or SAML assertion SSO login
        USERNAMEPASSWORD - allow user to login to control center via username password
        SAML - allow user to login to control center via SAML assertion
    </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="USERNAMEPASSWORDANDSAML" />
      <xs:enumeration value="USERNAMEPASSWORD" />
      <xs:enumeration value="SAML" />
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="EditUserForPartnersRequest">
    <xs:annotation>
      <xs:documentation>
                Edit TimeZone, Language for external partners.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="0" name="username" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Which username to edit.
                                    By default, if this element is not present, meanning edit login user itself.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="changetype" type="ChangeTypeEnum">
              <xs:annotation>
                <xs:documentation>
                                    This field is deprecated.
                                    The element exists for backward compatible purpose.
                                    We will NOT validate against the value of change type in server side.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="timezone" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Support TimeZone IDs from java.util.TimeZone#getAvailableIDs(). E.g. America/Los_Angeles
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="language" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Support Language IDs
                                    en, en_GB, pt, pt_PT, es, es_ES, de, fr, hu, ja, ru, nl, zh_CN, zh_TW, in_ID .
                                    If send a not supported language id will fall back to en
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="sharedSecretToken" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    Current shared secret token created in CreateUser API.
                                    If current shared secret token is empty in DB and newSharedSecretToken is present, then the newSharedSecretToken will be added as the shared secret token.
                                    If current shared secret token is not empty in DB, then the sharedSecretToken has to match the one in DB in order to update to the newSharedSecretToken.
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="newSharedSecretToken" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    new shared secret token to update. The sharedSecretToken has to match existing one in DB or is empty in order to update to the new one.
                                    The string is up to 512 long characters excluding inner spaces, commas and asterisks
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="EditUserForPartnersResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:boolean" />
            <xs:element minOccurs="0" name="errorMessage" type="ResponseStatusType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="ChangeTypeEnum">
    <xs:annotation>
      <xs:documentation>
            Define Enum for Change Type. We allow three changes: TIMEZONE, LANGUAGE, ALL
        </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="TIMEZONE" />
      <xs:enumeration value="LANGUAGE" />
      <xs:enumeration value="ALL" />
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="DeleteUserForPartnersRequest">
    <xs:annotation>
      <xs:documentation>
                Delete a user for a given user id.
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="userLogin" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                    User login name want to delete
                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="DeleteUserForPartnersResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:boolean" />
            <xs:element minOccurs="0" name="errorMessage" type="ResponseStatusType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SimLocationAlertRequest">
    <xs:annotation>
      <xs:documentation>
        Receives alert for SIMs when their location changes or they become non locatable
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="alertType">
              <xs:simpleType>
                <xs:annotation>
                  <xs:documentation>
                                Alert Types:
                                "LOCATION_CHANGE": Location Change,
                                "DEVICE_NOT_LOCATABLE": Not Locatable,
                            </xs:documentation>
                </xs:annotation>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="LOCATION_CHANGE" />
                  <xs:enumeration value="DEVICE_NOT_LOCATABLE" />
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SimLocationAlertResponse">
    <xs:annotation>
      <xs:documentation>
        Response for Sim Location Alert API call
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
            <xs:element name="status" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Status of the request. Success or Failure.
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SimLocationChargeRequest">
    <xs:annotation>
      <xs:documentation>
            Locatrix will call this API when a user is in the LBS portal and clicks on a device to find its location
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="SimLocationChargeResponseType">
    <xs:annotation>
      <xs:documentation>
            The detailed information about request execution status.
        </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="iccid" type="xs:string" />
      <xs:element name="status" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                    Request Status:
                    "SUCCESS": Success,
                    "FAILURE": Failure
                </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="errorCode" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                    High-level Error Code. That defines the Validation errors, Business rule validation errors or processing Errors. E.g.: 1800109
                    Available error codes are:
                    6500000 - System error: Unknown
                    6500001 - Invalid ICCID
                    6500002 - Location service is not enabled for account
                </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="errorDetails" type="xs:string">
        <xs:annotation>
          <xs:documentation>
                    Details of the each error message possible input values. E.g. ICCID has no LBS function enabled at the account level
                </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="SimLocationChargeResponse">
    <xs:annotation>
      <xs:documentation>
            Response for Sim Location Charge API call
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="simLocationChargeResponseDetails" type="SimLocationChargeResponseType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetSimLocationRequest">
    <xs:annotation>
      <xs:documentation>
            Request for device location details.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccid" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetSimLocationResponse">
    <xs:annotation>
      <xs:documentation>
        Response for device location details.
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="0" name="location">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="iccid" type="xs:string" />
                  <xs:element name="msisdn" type="xs:long" />
                  <xs:element name="longitude" type="xs:float" />
                  <xs:element name="latitude" type="xs:float" />
                  <xs:element name="address" type="xs:string" />
                  <xs:element name="time" type="xs:string" />
                  <xs:element name="accuracy" type="xs:short" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="status" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>
                            Request Status:
                            "SUCCESS": True,
                            "FAILURE": False
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="errorCode" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                        High-level Error Code. This is optional and return a value when status is false.
                        Available error codes are:
                        6500000 - System error: Unknown
                        6500001 - Invalid ICCID.
                        6500002 - Location service is not enabled for account.
                        6500003 - operation not supported for 'PAYG' location service type.
                        6500004 - Input parameter missing
                        6500005 - Error from LocationServices
                        6500006 - Location Base Service feature is not enabled yet. Please contact the support person.
                    </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="errorDetails" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Details of the each error message possible input values. E.g. Invalid ICCID.
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="UpdateOrderShipmentInformationRequest">
    <xs:annotation>
      <xs:documentation>
        Request for Order Shipment Information for ATT Cargo View with FlightSafe
        If the request failed, a SOAP fault will be returned. Detailed reason about the failure
                will be in the detail section of the fault.
                
        See UpdateOrderShipmentInformationResponse for error codes.
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence minOccurs="1" maxOccurs="1">
            <xs:element name="JasperOrderID" type="xs:string" />
            <xs:element minOccurs="1" name="ExtOrderID" type="xs:string" />
            <xs:element minOccurs="1" name="ShippedDate" type="xs:date" />
            <xs:element minOccurs="1" maxOccurs="unbounded" name="OrderLine" type="OrderLine" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="OrderLine">
    <xs:sequence minOccurs="1" maxOccurs="1">
      <xs:element name="OrderLineID" type="xs:long" />
      <xs:element name="ItemID" type="xs:string" />
      <xs:element name="ShipQty" type="xs:long" />
      <xs:element minOccurs="0" maxOccurs="1" name="TrackingURL" type="xs:anyURI" />
      <xs:element minOccurs="0" maxOccurs="1" name="TrackingNumber" type="xs:string" />
      <xs:element minOccurs="0" maxOccurs="1" name="SerialNumber" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:element name="UpdateOrderShipmentInformationResponse">
    <xs:annotation>
      <xs:documentation>
        Here is list of status codes:
        
        SUCCESS Success. The order was updated
        
        MISSING_JASPER_ORDER_NUMBER The Jasper Order ID must be provided.
        INVALID_JASPER_ORDER_NUMBER The Jasper Order ID does not exist.
        MISSING_YODA_ORDER_NUMBER The Yoda Order ID must be provided.
        MISSING_SHIPPED_DATE The Shipped Date must be provided.
        MISSING_ORDER_LINE_ID The Order Line ID must be provided for each Order Line element.
        INVALID_ORDER_LINE_ID The Order Line ID does not exist.
        MISSING_ITEM_ID The Item ID must be provided for each Order Line element.
        MISSING_SHIP_QTY The Ship Qty must be provided for each Order Line element.
        INVALID_SHIP_QTY The Ship Qty must be zero or greater.
        GENERIC_ERROR The notification api failed due to generic reasons.
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="1" name="status" type="xs:string" />
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="SteeringType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="00000000" />
      <xs:enumeration value="00000001" />
      <xs:enumeration value="00000010" />
      <xs:enumeration value="00000011" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="RoamingSteeringProfileInfoResponseType">
    <xs:sequence>
      <xs:element name="RSP_ID" type="xs:int" />
      <xs:element name="RESULT" type="xs:int" />
      <xs:element name="DESCRIPTION" type="xs:string" />
      <xs:element minOccurs="0" name="NETWORKS" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LineResultType">
    <xs:sequence>
      <xs:element name="IMSI" type="xs:string" />
      <xs:element name="RESULT" type="xs:int" />
      <xs:element name="DESCRIPTION" type="xs:string" />
      <xs:element minOccurs="0" name="MSISDN" type="xs:string" />
      <xs:element minOccurs="0" name="RSP_ID" type="xs:int" />
      <xs:element minOccurs="0" name="STEERING_TYPE" type="SteeringType" />
      <xs:element minOccurs="0" name="CARD_TYPE" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:element name="GetRoamingSteeringProfileInfoRequest">
    <xs:annotation>
      <xs:documentation>
               Request for getting information about a RoamingSteeringProfile
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="50" name="RSPID" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetLineInformationRequest">
    <xs:annotation>
      <xs:documentation>
                Request for getting line information about a device
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="50" name="IMSI" type="xs:string" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetRoamingSteeringProfileInfoResponse">
    <xs:annotation>
      <xs:documentation>
                Response containing information about the RoamingSteeringProfile
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="50" name="RSPID_RES" type="RoamingSteeringProfileInfoResponseType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetLineInformationResponse">
    <xs:annotation>
      <xs:documentation>
                Response containing information about the IMSI
            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="50" name="IMSI_RES" type="LineResultType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="VIVOMsisdnCallbackRequest">
    <xs:annotation>
      <xs:documentation>
            Updates the MSISDN to SIM
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="0" name="requestId" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Unique ID so that asynchronous responses can be tracked by Jasper
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="iccid" type="xs:string" />
            <xs:element minOccurs="0" name="msisdn" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Full international MSISDN
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="subscriptionId" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                E.g. For Vivo, Atlys ID associated to a line provisioning
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="responseCode" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                API Response Status
                                00 - success
                                XX - Failure
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="responseCodeDescription" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Text Description of the response code
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="VIVOMsisdnCallbackResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:boolean" />
            <xs:element minOccurs="0" name="errorMessage" type="ResponseStatusType" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="TransferTrialSimsToAccountRequest">
    <xs:annotation>
      <xs:documentation>
            Transfer the Trial SIMs from trial invertory to another.

            ICCID and Transfer status is returned as response.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="iccidList">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="unbounded" name="iccid" type="xs:string" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="accountId" type="xs:long" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="TransferTrialSimsToAccountResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="simTransferToAccountStatusList">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="unbounded" name="simtransfertoaccountstatus" type="SimTransferToAccountStatusType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="AdvanceShipmentNotificationRequest">
    <xs:annotation>
      <xs:documentation>
            Advance Shipment Notification for a given Jasper order. This will change the Order status to Partially Shipped.
            If ICCIDs are present in the request, they will be transferred to the account that placed the SIM Order.
            RatePlan, CommPlan and SIM Stats are optional fields that will be used if specified otherwise the values from the SIM Order will be used, with account level defaults.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence minOccurs="1" maxOccurs="1">
            <xs:element minOccurs="1" name="orderId" type="xs:string" />
            <xs:element minOccurs="0" name="statusUpdateNote">
              <xs:annotation>
                <xs:documentation>
                                These notes only appear in the SIM Order audit trail for the status change. This DOES NOT update the Notes field of the SIM Order. Limited to 500 characters.
                            </xs:documentation>
              </xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:maxLength value="500" />
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
            <xs:element minOccurs="1" maxOccurs="1" name="orderLineItems">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="1" maxOccurs="1" name="orderLineItem" type="orderLineItemType" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="orderLineItemType">
    <xs:annotation>
      <xs:documentation>
        OrderLineItem MUST be present in the Shipment Notification.
        Each orderlineitem MUST have one or more shipments (tracking number and optional tracking URL).
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="1" maxOccurs="1" name="shipments">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="1" name="shipment" type="shipmentTrackingType" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="shipmentTrackingType">
    <xs:annotation>
      <xs:documentation>
        Shipment Tracking Type signifies a single shipment and MAY have one or more list of iccids.
        Each shipment MUST have a tracking number and MUST have a shipment date in UTC or with timezone offset.
        If present, ICCIDs will be validated and then transferred to the account that placed the SIM order.
        Each shipment MAY have a tracking URL. If present, the tracking number will be linked to the URL in the web UI.
        If RatePlan, CommPlan and SIM Status are specified in the API call they will be used, otherwise the values from the SIM Order will be used, with account level defaults.
    </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="1" name="iccids">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="unbounded" name="iccid" type="xs:string" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="targetRatePlan" type="xs:string" />
      <xs:element minOccurs="0" name="targetCommunicationPlan" type="xs:string" />
      <xs:element minOccurs="0" name="targetSIMStatus" type="xs:string" />
      <xs:element minOccurs="1" maxOccurs="1" name="TrackingNumber" type="xs:string" />
      <xs:element minOccurs="0" name="shipDate" type="xs:dateTime" />
      <xs:element minOccurs="0" maxOccurs="1" name="TrackingURL" type="xs:anyURI" />
      <xs:element minOccurs="0" maxOccurs="1" name="shipmentStatus" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:element name="AdvanceShipmentNotificationResponse">
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="status" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Reponse Status: SUCCESS, FAILURE
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="bulkUpdateID" type="xs:string" />
            <xs:element name="statusReason" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Reponse Status Reasons:
                            "SUCCESS": Success,
                            "FAILURE_MISSING_ORDER_ID": Missing order id,
                            "FAILURE_MISSING_ICCID": Missing iccid,
                            "FAILURE_MISSING_TRACKING_NUMBER": Missing Tracking Number,
                            "FAILURE_INVALID_ORDER_ID": Invalid order id,
                            "FAILURE_INVALID_ORDER_TYPE": Given orderId is not of type SIM,
                            "FAILURE_INVALID_SHIPPED_QUANTITY": The shipment quantity exceeds the SIM count in the Order,
                            "FAILURE_INVALID_SHIP_DATE": The Ship Date cannot be earlier than the Order Date,
                            "FAILURE_INVALID_RATEPLAN_NAME": Given rate plan name is invalid for this order,
                            "FAILURE_INVALID_COMMPLAN_NAME": Given communication plan name is invalid for this order,
                            "FAILURE_ACCOUNT_TRANSFER_INACTIVE_COMMPLAN_SPECIFIED": Inactive commplan specified for the account transfer,
                            "FAILURE_INVALID_TARGET_SIMSTATE": Given target SIM state is invalid,
                            "FAILURE_INVALID_ICCID_NOT_IN_INVENORY": One or more specified ICCIDs are not in inventory account,
                            "FAILURE_NOTES_TOO_LONG": Status update notes has too many characters,
                            "FAILURE_INVALID_ORDER_STATUS": The Order status is invalid to receive shipment notification,
                            "FAILURE_MAXIMUM_ICCID_COUNT_EXCEEDED": The maximum number of ICCIDs allowed in a order request are exceeded,
                            "FAILURE_NO_OPERATOR_INVENTORY_ACCOUNT": Could not find inventory account,
                            "FAILURE_COMMPLAN_ACCOUNT_DONOT_MATCH": Given Comm Plan is not accessible to the account,
                            "FAILURE_RATEPLAN_ACCOUNT_DONOT_MATCH": Given Rate Plan is not accessible to the account,
                            "FAILURE_DEFAULT_RATEPLAN_NOT_FOUND": Default Rate Plan not present for the account,
                            "FAILURE_DEFAULT_COMMPLAN_NOT_FOUND": Default Comm Plan not present for the account,
                            "FAILURE_ACCOUNT_TRANSFER_TARGET_ACCOUNT_NOT_FOUND": Could not find the target account for the account transfer,
                            "FAILURE_ACCOUNT_TRANSFER_TARGET_ACCOUNT_INVALID": Invalid target account specified for the transfer,
                            "FAILURE_MISSING_VALUES": One or more fields are missing,
                            "FAILURE": General failure
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ChangeImeiRequest">
    <xs:annotation>
      <xs:documentation>                Change Imei for a given MSISDN OR IMSI            </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>                    IMSI, MSISDN and IMEI.                </xs:documentation>
      </xs:annotation>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="1" name="imsi" type="xs:string" />
            <xs:element minOccurs="0" maxOccurs="1" name="msisdn" type="xs:string" />
            <xs:element minOccurs="0" name="imei" type="xs:string">
              <xs:annotation>
                <xs:documentation>                                    This field may have the device IMEI or IMEISV depending on various factors such as your operator's installation as well as the device itself.                                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ChangeImeiResponse">
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>                    Subscriber Response Status type will hold the result of the request. For all responses, it will have                    SUCCESS or FAILURE values.                </xs:documentation>
      </xs:annotation>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="responseStatus" type="ResponseStatus" />
            <xs:element minOccurs="0" name="error" type="ResponseError" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="ResponseStatus">
    <xs:annotation>
      <xs:documentation>                it will have SUCCESS or FAILURE values            </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="FAILURE" />
      <xs:enumeration value="SUCCESS" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="ResponseError">
    <xs:annotation>
      <xs:documentation>                When the given request is "FAILURE" then it will carry the error details            </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="errorCode" type="xs:string" />
      <xs:element name="errorMessage" type="xs:string">
        <xs:annotation>
          <xs:documentation>                        Details of the each error message possible input values.                    </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="InterSPPrepareSrcSimRequest">
    <xs:annotation>
      <xs:documentation>
            Request object for preparing the src sim API for InterSP transfers.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="distributedSimTransferId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                ID of the global sim transfer process - Used for tracking/logging purposes
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                ICCID of the src SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="copyAllAttributes" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>
                                Boolean value specified to copy all attributes of source to target.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="InterSPPrepareSrcSimResponse">
    <xs:annotation>
      <xs:documentation>
        Response object for preparing the src sim API for InterSP transfers.
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="0" name="previousSourceSimState" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            state of the src sim
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceSimState" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            state of the src sim
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="externalSimProfileId" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            The external sim profile id of a sim.
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="simInfo" type="SimInfo" />
            <xs:element name="simAuxFieldInfo" type="SimAuxFieldInfo" />
            <xs:element name="imsiInfo" type="ImsiInfo" />
            <xs:element name="rawSimInfo" type="RawSimInfo" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="InterSPCreateTargetSimRequest">
    <xs:annotation>
      <xs:documentation>
            Request object for preparing the src sim API for InterSP transfers.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="distributedSimTransferId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                ID of the global sim transfer process - Used for tracking/logging purposes
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                ICCID of the src SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetOperator" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Name of the target operator in which the new target sim is created
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetAccount" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Name of the target account in which the new target sim is to be created.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="externalSimProfileId" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                The external sim profile id of a sim.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="simInfo" type="SimInfo" />
            <xs:element name="simAuxFieldInfo" type="SimAuxFieldInfo" />
            <xs:element name="imsiInfo" type="ImsiInfo" />
            <xs:element name="rawSimInfo" type="RawSimInfo" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="InterSPCreateTargetSimResponse">
    <xs:annotation>
      <xs:documentation>
        Response object for preparing the src sim API for InterSP transfers.
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="distributedSimTransferId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                            GlobalSimTransferId represents request Id of the transfer request
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="status" type="GetOrCreateSimFromVirtualSubscriptionStatus">
              <xs:annotation>
                <xs:documentation>
                            Status of the target sim creation
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="targetIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            ICCID of the target SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="InterSPMoveTargetSimRequest">
    <xs:annotation>
      <xs:documentation>
            Request object for moving the target sim from Inventory to target account for InterSP transfers.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="distributedSimTransferId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                ID of the global sim transfer process - Used for tracking/logging purposes
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="Iccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                ICCID of the src SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetAccount" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Name of the target account in which the new target sim is created
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetOperator" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Name of the target operator in which the new target sim is created
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="targetSimRatePlan" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Target SIM rate plan
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="targetSimCommPlan" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Target SIM comm plan
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="InterSPMoveTargetSimResponse">
    <xs:annotation>
      <xs:documentation>
        Response object for moving the target sim from Inventory to target account for InterSP transfers.
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="distributedSimTransferId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                            GlobalSimTransferId represents request Id of the transfer request
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="status" type="GetOrCreateSimFromVirtualSubscriptionStatus">
              <xs:annotation>
                <xs:documentation>
                            Status of the target sim creation
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="targetSimState" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            state of the target sim
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="targetSimRatePlan" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Target SIM rate plan
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="targetSimCommPlan" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Target SIM comm plan
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="InterSPResetTargetSimRequest">
    <xs:annotation>
      <xs:documentation>
            Request object for reset-ting the src sim for InterSP transfers.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="distributedSimTransferId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                ID of the global sim transfer process - Used for identifying the scheduled workflow.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="targetIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                ICCID of the src SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="resetFlag" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>
                                Boolean value specified to reset Source sim attributes.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="InterSPResetTargetSimResponse">
    <xs:annotation>
      <xs:documentation>
        Response object for reset-ting the src sim for InterSP transfers.
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element name="Iccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            ICCID of the src SIM
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="InterSPResetSrcSimRequest">
    <xs:annotation>
      <xs:documentation>
            Request object for reset-ting the src sim for InterSP transfers.
        </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="RequestType">
          <xs:sequence>
            <xs:element name="distributedSimTransferId" type="xs:long">
              <xs:annotation>
                <xs:documentation>
                                ID of the global sim transfer process - Used for identifying the scheduled workflow.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="sourceIccid" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                ICCID of the src SIM
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="resetFlag" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>
                                Boolean value specified to reset Source sim attributes.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="sourceSimState" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                                Desired state of the source sim on reset.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="otaAlgorithmType" type="GlobalSimOtaAlgoType">
              <xs:annotation>
                <xs:documentation>
                                A String value specifying the type of OTA algorithm.
                            </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="InterSPResetSrcSimResponse">
    <xs:annotation>
      <xs:documentation>
        Response object for reset-ting the src sim for InterSP transfers.
    </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent mixed="false">
        <xs:extension base="ResponseType">
          <xs:sequence>
            <xs:element minOccurs="0" name="previousSourceSimState" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            state of the src sim
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="sourceSimState" type="xs:string">
              <xs:annotation>
                <xs:documentation>
                            Source state of the src sim
                        </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
</xs:schema>