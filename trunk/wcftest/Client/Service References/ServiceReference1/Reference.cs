//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Listen.Fly", ConfigurationName="ServiceReference1.wcfSendServer")]
    public interface wcfSendServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="Listen.Fly/wcfSendServer/UdpSendData", ReplyAction="Listen.Fly/wcfSendServer/UdpSendDataResponse")]
        bool UdpSendData(byte[] content, System.Net.EndPoint remoteEndPoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="Listen.Fly/wcfSendServer/UdpSendData", ReplyAction="Listen.Fly/wcfSendServer/UdpSendDataResponse")]
        System.Threading.Tasks.Task<bool> UdpSendDataAsync(byte[] content, System.Net.EndPoint remoteEndPoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="Listen.Fly/wcfSendServer/UdpSendData2", ReplyAction="Listen.Fly/wcfSendServer/UdpSendData2Response")]
        bool UdpSendData2(byte[] content, string ip, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="Listen.Fly/wcfSendServer/UdpSendData2", ReplyAction="Listen.Fly/wcfSendServer/UdpSendData2Response")]
        System.Threading.Tasks.Task<bool> UdpSendData2Async(byte[] content, string ip, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="Listen.Fly/wcfSendServer/UdpSendData3", ReplyAction="Listen.Fly/wcfSendServer/UdpSendData3Response")]
        bool UdpSendData3(string datas, System.Net.EndPoint remoteEndPoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="Listen.Fly/wcfSendServer/UdpSendData3", ReplyAction="Listen.Fly/wcfSendServer/UdpSendData3Response")]
        System.Threading.Tasks.Task<bool> UdpSendData3Async(string datas, System.Net.EndPoint remoteEndPoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="Listen.Fly/wcfSendServer/UdpSendData4", ReplyAction="Listen.Fly/wcfSendServer/UdpSendData4Response")]
        bool UdpSendData4(string datas, string ip, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="Listen.Fly/wcfSendServer/UdpSendData4", ReplyAction="Listen.Fly/wcfSendServer/UdpSendData4Response")]
        System.Threading.Tasks.Task<bool> UdpSendData4Async(string datas, string ip, int port);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface wcfSendServerChannel : Client.ServiceReference1.wcfSendServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class wcfSendServerClient : System.ServiceModel.ClientBase<Client.ServiceReference1.wcfSendServer>, Client.ServiceReference1.wcfSendServer {
        
        public wcfSendServerClient() {
        }
        
        public wcfSendServerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public wcfSendServerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public wcfSendServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public wcfSendServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool UdpSendData(byte[] content, System.Net.EndPoint remoteEndPoint) {
            return base.Channel.UdpSendData(content, remoteEndPoint);
        }
        
        public System.Threading.Tasks.Task<bool> UdpSendDataAsync(byte[] content, System.Net.EndPoint remoteEndPoint) {
            return base.Channel.UdpSendDataAsync(content, remoteEndPoint);
        }
        
        public bool UdpSendData2(byte[] content, string ip, int port) {
            return base.Channel.UdpSendData2(content, ip, port);
        }
        
        public System.Threading.Tasks.Task<bool> UdpSendData2Async(byte[] content, string ip, int port) {
            return base.Channel.UdpSendData2Async(content, ip, port);
        }
        
        public bool UdpSendData3(string datas, System.Net.EndPoint remoteEndPoint) {
            return base.Channel.UdpSendData3(datas, remoteEndPoint);
        }
        
        public System.Threading.Tasks.Task<bool> UdpSendData3Async(string datas, System.Net.EndPoint remoteEndPoint) {
            return base.Channel.UdpSendData3Async(datas, remoteEndPoint);
        }
        
        public bool UdpSendData4(string datas, string ip, int port) {
            return base.Channel.UdpSendData4(datas, ip, port);
        }
        
        public System.Threading.Tasks.Task<bool> UdpSendData4Async(string datas, string ip, int port) {
            return base.Channel.UdpSendData4Async(datas, ip, port);
        }
    }
}
